import os
import requests
from flask import Flask, request
from dotenv import load_dotenv
import urllib.parse
from datetime import datetime
from pymongo import MongoClient
import re
import google.generativeai as genai
import certifi
import time

# .env ‡¶´‡¶æ‡¶á‡¶≤ ‡¶•‡ßá‡¶ï‡ßá Environment Variables ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø
load_dotenv()

# Flask ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™ ‡¶á‡¶®‡¶ø‡¶∂‡¶ø‡ßü‡¶æ‡¶≤‡¶æ‡¶á‡¶ú ‡¶ï‡¶∞‡¶æ
app = Flask(__name__)

# Environment Variables ‡¶•‡ßá‡¶ï‡ßá Key ‡¶è‡¶¨‡¶Ç Token ‡¶ó‡ßÅ‡¶≤‡ßã ‡¶®‡ßá‡¶ì‡ßü‡¶æ
FACEBOOK_PAGE_ACCESS_TOKEN = os.getenv('FACEBOOK_PAGE_ACCESS_TOKEN')
VERIFY_TOKEN = os.getenv('VERIFY_TOKEN')
GEMINI_API_KEY = os.getenv('GEMINI_API_KEY')
MONGO_URI = os.getenv('MONGO_URI')
TELEGRAM_USERNAME = os.getenv('TELEGRAM_USERNAME')
CALLMEBOT_API_KEY = os.getenv('CALLMEBOT_API_KEY')

# --- ‡¶°‡ßá‡¶ü‡¶æ‡¶¨‡ßá‡¶∏ ‡¶ï‡¶æ‡¶®‡ßá‡¶ï‡¶∂‡¶® ---
try:
    ca = certifi.where()
    client = MongoClient(MONGO_URI, tlsCAFile=ca)
    db = client.chatbot_db
    chat_history_collection = db.chat_history
    otn_tokens_collection = db.otn_tokens
    customer_details_collection = db.customer_details
    knowledge_collection = db.knowledge_base
    print("MongoDB ‡¶°‡ßá‡¶ü‡¶æ‡¶¨‡ßá‡¶∏‡ßá‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶∏‡¶Ç‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§‡•§")
except Exception as e:
    print(f"MongoDB ‡¶∏‡¶Ç‡¶Ø‡ßã‡¶ó‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ: {e}")
    client = None
# -------------------------

# --- ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£ ‡¶Ö‡¶≠‡¶ø‡¶¨‡¶æ‡¶¶‡¶®‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü ‡¶â‡¶§‡ßç‡¶§‡¶∞ ---
FAQ_RESPONSES = {
    ("hi", "hello", "ŸáÿßŸä", "ŸáŸÑŸà", "‡¶Ü‡¶∏‡¶∏‡¶æ‡¶≤‡¶æ‡¶Æ‡ßÅ ‡¶Ü‡¶≤‡¶æ‡¶á‡¶ï‡ßÅ‡¶Æ"): "‡¶Ü‡¶∏‡¶∏‡¶æ‡¶≤‡¶æ‡¶Æ‡ßÅ ‡¶Ü‡¶≤‡¶æ‡¶á‡¶ï‡ßÅ‡¶Æ, ‡¶∏‡ßç‡¶Ø‡¶æ‡¶∞/‡¶Æ‡ßç‡¶Ø‡¶æ‡¶Æ! üòä ‡¶Ü‡¶™‡¶®‡¶æ‡¶ï‡ßá ‡¶ï‡¶ø‡¶≠‡¶æ‡¶¨‡ßá ‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶ø?",
    ("thanks", "thank you", "ÿ¥ŸÉÿ±ÿß", "‡¶ß‡¶®‡ßç‡¶Ø‡¶¨‡¶æ‡¶¶"): "‡¶Ü‡¶™‡¶®‡¶æ‡¶ï‡ßá ‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡ßá‡¶∞‡ßá ‡¶Ü‡¶Æ‡¶∞‡¶æ ‡¶Ü‡¶®‡¶®‡ßç‡¶¶‡¶ø‡¶§!",
}
# ----------------------------------------------------

# --- Gemini AI ‡¶Æ‡¶°‡ßá‡¶≤ ‡¶ï‡¶®‡¶´‡¶ø‡¶ó‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ---
try:
    genai.configure(api_key=GEMINI_API_KEY)
    model = genai.GenerativeModel('gemini-2.5-flash-lite') 
    print("Gemini AI ‡¶Æ‡¶°‡ßá‡¶≤ (2.5 Flash-Lite) ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶≤‡ßã‡¶° ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§")
except Exception as e:
    print(f"Gemini AI ‡¶ï‡¶®‡¶´‡¶ø‡¶ó‡¶æ‡¶∞‡ßá‡¶∂‡¶®‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá: {e}")
    model = None

GRAPH_API_URL = 'https://graph.facebook.com/v19.0/me/messages'

def get_full_knowledge_base():
    if not client: return "‡¶ï‡ßã‡¶®‡ßã ‡¶§‡¶•‡ßç‡¶Ø ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø‡•§"
    try:
        all_docs = knowledge_collection.find({})
        knowledge_text = "\n".join([f"- {doc.get('information', '')}" for doc in all_docs])
        # ‡¶∏‡¶Æ‡ßç‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶Æ‡ßá‡¶®‡ßç‡¶Ø‡ßÅ‡¶ü‡¶ø‡¶ì ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá
        full_menu = """
        ‡¶∏‡¶Æ‡ßç‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶Æ‡ßá‡¶®‡ßç‡¶Ø‡ßÅ ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü:
        ‡ßß) ‡¶ö‡¶ø‡¶ï‡ßá‡¶® ‡¶∞‡ßã‡¶≤ ‡ßß‡ß´ ‡¶™‡¶ø‡¶∏‡ßá‡¶∞ ‡¶™‡ßç‡¶Ø‡¶æ‡¶ï    ‡ß®‡ß®‡ß´ ‡¶ü‡¶æ‡¶ï‡¶æ
        ‡ß®) ‡¶≠‡ßá‡¶ú‡¶ø‡¶ü‡ßá‡¶¨‡¶≤ ‡¶∞‡ßã‡¶≤ ‡ßß‡ß´ ‡¶™‡¶ø‡¶∏‡ßá‡¶∞ ‡¶™‡ßç‡¶Ø‡¶æ‡¶ï ‡ßß‡ß´‡ß¶ ‡¶ü‡¶æ‡¶ï‡¶æ
        ‡ß©) ‡¶¨‡¶ø‡¶´ ‡¶∞‡ßã‡¶≤ ‡ßß‡ß¶ ‡¶™‡¶ø‡¶∏‡ßá‡¶∞ ‡¶™‡ßç‡¶Ø‡¶æ‡¶ï ‡ß®‡ß´‡ß¶ ‡¶ü‡¶æ‡¶ï‡¶æ 
        ... (‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶∏‡¶Æ‡ßç‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶Æ‡ßá‡¶®‡ßç‡¶Ø‡ßÅ ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶•‡¶æ‡¶ï‡¶¨‡ßá)
        """
        return full_menu + "\n\n‡¶Ö‡¶®‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶Ø ‡¶§‡¶•‡ßç‡¶Ø:\n" + knowledge_text
    except Exception as e:
        print(f"‡¶∏‡¶Æ‡ßç‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶ú‡ßç‡¶û‡¶æ‡¶®‡¶≠‡¶æ‡¶®‡ßç‡¶°‡¶æ‡¶∞ ‡¶Ü‡¶®‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ: {e}")
        return "‡¶ï‡ßã‡¶®‡ßã ‡¶§‡¶•‡ßç‡¶Ø ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø‡•§"

@app.route('/')
def home():
    return '‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞‡¶ü‡¶ø ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶ö‡¶≤‡¶õ‡ßá!', 200

@app.route('/webhook', methods=['GET', 'POST'])
def webhook():
    if request.method == 'GET':
        if request.args.get('hub.verify_token') == VERIFY_TOKEN:
            return request.args.get('hub.challenge'), 200
        else:
            return '‡¶≠‡ßá‡¶∞‡¶ø‡¶´‡¶ø‡¶ï‡ßá‡¶∂‡¶® ‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶≠‡ßÅ‡¶≤', 403
    
    if request.method == 'POST':
        data = request.get_json()
        if data and data.get('object') == 'page':
            for entry in data.get('entry', []):
                for messaging_event in entry.get('messaging', []):
                    sender_id = messaging_event['sender']['id']
                    
                    if messaging_event.get('optin'):
                        # ... (OTN ‡¶ï‡ßã‡¶°)
                        continue

                    if messaging_event.get('message'):
                        message_text = messaging_event['message'].get('text')
                        if message_text:
                            # --- ‡¶®‡¶§‡ßÅ‡¶® ‡¶è‡¶¨‡¶Ç ‡¶∏‡¶∞‡¶≤‡ßÄ‡¶ï‡ßÉ‡¶§ ‡¶ï‡¶æ‡¶∞‡ßç‡¶Ø‡¶™‡ßç‡¶∞‡¶£‡¶æ‡¶≤‡ßÄ ---
                            lower_message = message_text.lower()
                            is_faq = False
                            for keywords, response in FAQ_RESPONSES.items():
                                for keyword in keywords:
                                    if re.search(r'\b' + re.escape(keyword) + r'\b', lower_message):
                                        send_facebook_message(sender_id, response)
                                        is_faq = True
                                        break
                                if is_faq: break
                            
                            if is_faq:
                                continue

                            # ‡¶Ø‡¶¶‡¶ø FAQ ‡¶®‡¶æ ‡¶π‡ßü, ‡¶§‡¶¨‡ßá‡¶á AI ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ
                            save_message_to_db(sender_id, 'user', message_text)
                            if model:
                                try:
                                    bot_response = get_gemini_response(sender_id, message_text)
                                    save_message_to_db(sender_id, 'model', bot_response)
                                    
                                    user_facing_response = bot_response
                                    
                                    if "[ORDER_CONFIRMATION]" in bot_response:
                                        bill_match = re.search(r'\[BILL:(\d+\.?\d*)\]', bot_response)
                                        total_bill = bill_match.group(1) if bill_match else "‡¶Æ‡ßã‡¶ü ‡¶¨‡¶ø‡¶≤"
                                        
                                        confirmation_message = f"‡¶ß‡¶®‡ßç‡¶Ø‡¶¨‡¶æ‡¶¶, ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Æ‡ßã‡¶ü ‡¶ö‡¶æ‡¶∞‡ßç‡¶ú {total_bill} ‡¶ü‡¶æ‡¶ï‡¶æ‡•§\n‡¶Ü‡¶™‡¶®‡¶ø ‡ßß ‡¶•‡ßá‡¶ï‡ßá ‡ß© ‡¶¶‡¶ø‡¶®‡ßá‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶™‡ßç‡¶∞‡ßã‡¶°‡¶æ‡¶ï‡ßç‡¶ü‡¶∏ ‡¶™‡ßá‡¶Ø‡¶º‡ßá ‡¶Ø‡¶æ‡¶¨‡ßá‡¶®‡•§\n‡¶¶‡¶Ø‡¶º‡¶æ ‡¶ï‡¶∞‡ßá ‡¶ï‡¶®‡¶´‡¶æ‡¶∞‡ßç‡¶Æ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶™‡¶∞ ‡¶ï‡ßç‡¶Ø‡¶æ‡¶®‡¶∏‡ßá‡¶≤ ‡¶ï‡¶∞‡¶ø‡¶Ø‡¶º‡ßá‡¶® ‡¶®‡¶æ, ‡¶ï‡¶æ‡¶∞‡¶£ ‡¶Ü‡¶Æ‡¶∞‡¶æ ‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞ ‡¶¶‡ßá‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶™‡¶∞ ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶ø‡•§"
                                        send_facebook_message(sender_id, confirmation_message)
                                        
                                        details_match = re.search(r'\[DETAILS:(.*?)\]', bot_response)
                                        if details_match:
                                            details_str = details_match.group(1)
                                            save_customer_details(sender_id, details_str)
                                        
                                        send_otn_request(sender_id)
                                    else:
                                        send_facebook_message(sender_id, user_facing_response)

                                except Exception as e:
                                    print(f"Gemini ‡¶•‡ßá‡¶ï‡ßá ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶Ü‡¶®‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá: {e}")
                                    send_facebook_message(sender_id, "‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§, ‡¶è‡¶á ‡¶Æ‡ßÅ‡¶π‡ßÇ‡¶∞‡ßç‡¶§‡ßá ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶¶‡¶ø‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶õ‡¶ø ‡¶®‡¶æ‡•§")
        return 'Event received', 200

def get_gemini_response(sender_id, message):
    history = get_chat_history(sender_id, limit=6)
    formatted_history = "\n".join([f"{msg['role']}: {msg['content']}" for msg in history])

    customer_details = get_saved_customer_details(sender_id)
    details_context = "‡¶è‡¶á ‡¶ó‡ßç‡¶∞‡¶æ‡¶π‡¶ï‡ßá‡¶∞ ‡¶ï‡ßã‡¶®‡ßã ‡¶§‡¶•‡ßç‡¶Ø ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶ï‡¶æ‡¶õ‡ßá ‡¶∏‡ßá‡¶≠ ‡¶ï‡¶∞‡¶æ ‡¶®‡ßá‡¶á‡•§"
    saved_address = ""
    if customer_details and customer_details.get('address'):
        saved_address = customer_details.get('address')
        details_context = f"‡¶è‡¶á ‡¶ó‡ßç‡¶∞‡¶æ‡¶π‡¶ï‡ßá‡¶∞ ‡¶è‡¶ï‡¶ü‡¶ø ‡¶†‡¶ø‡¶ï‡¶æ‡¶®‡¶æ ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶ï‡¶æ‡¶õ‡ßá ‡¶∏‡ßá‡¶≠ ‡¶ï‡¶∞‡¶æ ‡¶Ü‡¶õ‡ßá: {saved_address}"
    
    knowledge_base_for_prompt = get_full_knowledge_base()

    prompt = f"""
    ### ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¨‡ßç‡¶Ø‡¶ï‡ßç‡¶§‡¶ø‡¶§‡ßç‡¶¨ (Persona) ###
    ‡¶Ü‡¶™‡¶®‡¶ø "‡¶ò‡¶∞‡ßá‡¶∞ ‡¶ñ‡¶æ‡¶¨‡¶æ‡¶∞" ‡¶è‡¶∞ ‡¶è‡¶ï‡¶ú‡¶® ‡¶¶‡¶ï‡ßç‡¶∑ ‡¶è‡¶¨‡¶Ç ‡¶™‡ßá‡¶∂‡¶æ‡¶¶‡¶æ‡¶∞ ‡¶∏‡¶π‡¶ï‡¶æ‡¶∞‡ßÄ‡•§ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶π‡¶¨‡ßá ‡¶∏‡¶Ç‡¶ï‡ßç‡¶∑‡¶ø‡¶™‡ßç‡¶§, ‡¶®‡¶ø‡¶∞‡ßç‡¶≠‡ßÅ‡¶≤ ‡¶è‡¶¨‡¶Ç ‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø‡¶ï‡¶æ‡¶∞‡ßÄ‡•§

    ### ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ú‡ßç‡¶û‡¶æ‡¶® (Knowledge Base) ###
    {knowledge_base_for_prompt}
    
    ### ‡¶ó‡ßç‡¶∞‡¶æ‡¶π‡¶ï‡ßá‡¶∞ ‡¶∏‡ßá‡¶≠ ‡¶ï‡¶∞‡¶æ ‡¶§‡¶•‡ßç‡¶Ø ###
    {details_context}

    ### ‡¶ï‡¶†‡ßã‡¶∞ ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡ßá‡¶∂‡¶®‡¶æ (Strict Instructions) ###
    1.  **‡¶∏‡ßÄ‡¶Æ‡¶æ‡¶®‡¶æ:** ‡¶∏‡¶∞‡ßç‡¶¨‡¶¶‡¶æ ‡¶è‡¶¨‡¶Ç ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ "‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ú‡ßç‡¶û‡¶æ‡¶®" ‡¶è‡¶¨‡¶Ç "‡¶™‡ßÇ‡¶∞‡ßç‡¶¨‡ßá‡¶∞ ‡¶ï‡¶•‡ßã‡¶™‡¶ï‡¶•‡¶®" ‡¶è‡¶∞ ‡¶â‡¶™‡¶∞ ‡¶≠‡¶ø‡¶§‡ßç‡¶§‡¶ø ‡¶ï‡¶∞‡ßá ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶¶‡¶ø‡¶®‡•§ ‡¶è‡¶∞ ‡¶¨‡¶æ‡¶á‡¶∞‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶∂‡¶¨‡ßç‡¶¶‡¶ì ‡¶¨‡¶≤‡¶æ ‡¶Ø‡¶æ‡¶¨‡ßá ‡¶®‡¶æ‡•§
    2.  **‡¶Ö‡¶ú‡¶æ‡¶®‡¶æ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®:** ‡¶Ø‡¶¶‡¶ø ‡¶ó‡ßç‡¶∞‡¶æ‡¶π‡¶ï‡ßá‡¶∞ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡ßá‡¶∞ ‡¶â‡¶§‡ßç‡¶§‡¶∞ "‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ú‡ßç‡¶û‡¶æ‡¶®"-‡¶è‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡ßá, ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶¨‡¶≤‡ßÅ‡¶®: "‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§, ‡¶è‡¶á ‡¶¨‡¶ø‡¶∑‡ßü‡ßá ‡¶Ü‡¶Æ‡¶ø ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶®‡¶á‡•§ ‡¶Ü‡¶™‡¶®‡¶æ‡¶ï‡ßá ‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶è‡¶ï‡¶ú‡¶® ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶®‡¶ø‡¶ß‡¶ø ‡¶∂‡ßÄ‡¶ò‡ßç‡¶∞‡¶á ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶Ø‡ßã‡¶ó‡¶æ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶¨‡ßá‡•§"
    3.  **‡¶ï‡ßç‡¶∞‡¶Æ‡¶ø‡¶ï ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶¨‡ßã‡¶ù‡¶æ:** "‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ú‡ßç‡¶û‡¶æ‡¶®"-‡¶è‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶¶‡ßá‡¶ì‡ßü‡¶æ ‡¶Æ‡ßá‡¶®‡ßç‡¶Ø‡ßÅ‡¶ü‡¶ø ‡¶è‡¶ï‡¶ü‡¶ø numerised ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ‡•§ ‡¶Ø‡¶¶‡¶ø ‡¶ó‡ßç‡¶∞‡¶æ‡¶π‡¶ï "‡ßß ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞" ‡¶¨‡¶æ "‡ßß ‡¶ì ‡ß® ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞" ‡¶¨‡¶≤‡ßá, ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶ï‡ßá ‡¶Ö‡¶¨‡¶∂‡ßç‡¶Ø‡¶á ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ ‡¶•‡ßá‡¶ï‡ßá ‡¶∏‡¶†‡¶ø‡¶ï ‡¶Ü‡¶á‡¶ü‡ßá‡¶Æ‡¶ó‡ßÅ‡¶≤‡ßã ‡¶∂‡¶®‡¶æ‡¶ï‡ßç‡¶§ ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡¶¨‡ßá‡•§
    4.  **‡¶™‡ßç‡¶∞‡¶∏‡¶ô‡ßç‡¶ó ‡¶¨‡ßã‡¶ù‡¶æ (‡¶∏‡¶¨‡¶ö‡ßá‡ßü‡ßá ‡¶ó‡ßÅ‡¶∞‡ßÅ‡¶§‡ßç‡¶¨‡¶™‡ßÇ‡¶∞‡ßç‡¶£):** ‡¶Ø‡¶¶‡¶ø ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ü‡¶ó‡ßá‡¶∞ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡ßá ‡¶Ü‡¶™‡¶®‡¶ø ‡¶ï‡ßã‡¶®‡ßã ‡¶ï‡¶®‡¶´‡¶æ‡¶∞‡ßç‡¶Æ‡ßá‡¶∂‡¶® ‡¶ö‡ßá‡ßü‡ßá ‡¶•‡¶æ‡¶ï‡ßá‡¶® (‡¶Ø‡ßá‡¶Æ‡¶®: "‡¶Ü‡¶™‡¶®‡¶ø ‡¶ï‡¶ø ‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶ö‡¶æ‡¶®?") ‡¶è‡¶¨‡¶Ç ‡¶ó‡ßç‡¶∞‡¶æ‡¶π‡¶ï "‡¶ú‡ßç‡¶¨‡¶ø", "‡¶π‡ßç‡¶Ø‡¶æ‡¶Å", "hmm", "ok", "‡¶ï‡¶®‡¶´‡¶æ‡¶∞‡ßç‡¶Æ", "‡¶®‡¶ø‡¶§‡ßá ‡¶ö‡¶æ‡¶á", "‡¶ö‡¶æ‡¶á" ‡¶è‡¶á ‡¶ß‡¶∞‡¶®‡ßá‡¶∞ ‡¶ï‡ßã‡¶®‡ßã ‡¶á‡¶§‡¶ø‡¶¨‡¶æ‡¶ö‡¶ï ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶¶‡ßá‡ßü, ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡¶ü‡¶ø ‡¶™‡ßÅ‡¶®‡¶∞‡¶æ‡¶¨‡ßÉ‡¶§‡ßç‡¶§‡¶ø ‡¶®‡¶æ ‡¶ï‡¶∞‡ßá ‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞‡ßá‡¶∞ ‡¶™‡¶∞‡¶¨‡¶∞‡ßç‡¶§‡ßÄ ‡¶ß‡¶æ‡¶™‡ßá ‡¶ö‡¶≤‡ßá ‡¶Ø‡¶æ‡¶¨‡ßá‡¶® (‡¶Ø‡ßá‡¶Æ‡¶®: ‡¶¨‡¶ø‡¶≤ ‡¶π‡¶ø‡¶∏‡¶æ‡¶¨ ‡¶ï‡¶∞‡¶æ ‡¶¨‡¶æ ‡¶†‡¶ø‡¶ï‡¶æ‡¶®‡¶æ ‡¶ö‡¶æ‡¶ì‡ßü‡¶æ)‡•§
    5.  **‡¶π‡¶ø‡¶∏‡¶æ‡¶¨ ‡¶ï‡¶∞‡¶æ:** ‡¶Ø‡¶¶‡¶ø ‡¶ó‡ßç‡¶∞‡¶æ‡¶π‡¶ï ‡¶è‡¶ï‡¶æ‡¶ß‡¶ø‡¶ï ‡¶Ü‡¶á‡¶ü‡ßá‡¶Æ‡ßá‡¶∞ ‡¶Æ‡ßã‡¶ü ‡¶¶‡¶æ‡¶Æ ‡¶ú‡¶æ‡¶®‡¶§‡ßá ‡¶ö‡¶æ‡ßü, ‡¶§‡¶æ‡¶π‡¶≤‡ßá "‡¶™‡ßÇ‡¶∞‡ßç‡¶¨‡ßá‡¶∞ ‡¶ï‡¶•‡ßã‡¶™‡¶ï‡¶•‡¶®" ‡¶è‡¶¨‡¶Ç "‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ú‡ßç‡¶û‡¶æ‡¶®" ‡¶•‡ßá‡¶ï‡ßá ‡¶Ü‡¶á‡¶ü‡ßá‡¶Æ ‡¶ì ‡¶¶‡¶æ‡¶Æ ‡¶®‡¶ø‡ßü‡ßá ‡¶∏‡¶†‡¶ø‡¶ï‡¶≠‡¶æ‡¶¨‡ßá ‡¶π‡¶ø‡¶∏‡¶æ‡¶¨ ‡¶ï‡¶∞‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶¨‡ßç‡¶∞‡ßá‡¶ï‡¶°‡¶æ‡¶â‡¶® ‡¶∏‡¶π ‡¶Æ‡ßã‡¶ü ‡¶¨‡¶ø‡¶≤ ‡¶¶‡ßá‡¶ñ‡¶æ‡¶¨‡ßá‡¶®‡•§
    6.  **‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞ ‡¶ï‡¶®‡¶´‡¶æ‡¶∞‡ßç‡¶Æ ‡¶ï‡¶∞‡¶æ:** ‡¶ó‡ßç‡¶∞‡¶æ‡¶π‡¶ï ‡¶Ø‡¶ñ‡¶® ‡¶§‡¶æ‡¶∞ ‡¶®‡¶æ‡¶Æ, ‡¶†‡¶ø‡¶ï‡¶æ‡¶®‡¶æ ‡¶è‡¶¨‡¶Ç ‡¶´‡ßã‡¶® ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶¶‡ßá‡¶¨‡ßá, ‡¶§‡¶ñ‡¶®‡¶á ‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞‡¶ü‡¶ø ‡¶ö‡ßÇ‡ßú‡¶æ‡¶®‡ßç‡¶§‡¶≠‡¶æ‡¶¨‡ßá ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶π‡¶¨‡ßá‡•§ ‡¶§‡¶ñ‡¶® ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶â‡¶§‡ßç‡¶§‡¶∞‡ßá‡¶∞ ‡¶∂‡ßÅ‡¶∞‡ßÅ‡¶§‡ßá ‡¶Ö‡¶¨‡¶∂‡ßç‡¶Ø‡¶á "[ORDER_CONFIRMATION]" ‡¶ü‡ßç‡¶Ø‡¶æ‡¶ó‡¶ü‡¶ø ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶¨‡ßá‡¶®‡•§ ‡¶è‡¶∞‡¶™‡¶∞ "[BILL:‡¶Æ‡ßã‡¶ü_‡¶ü‡¶æ‡¶ï‡¶æ]" ‡¶è‡¶¨‡¶Ç "[DETAILS:‡¶®‡¶æ‡¶Æ=..., ‡¶†‡¶ø‡¶ï‡¶æ‡¶®‡¶æ=..., ‡¶´‡ßã‡¶®=...]" ‡¶ü‡ßç‡¶Ø‡¶æ‡¶ó‡¶ó‡ßÅ‡¶≤‡ßã ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶¨‡ßá‡¶®‡•§
    
    ### ‡¶ï‡¶•‡ßã‡¶™‡¶ï‡¶•‡¶®‡ßá‡¶∞ ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£ ###
    user: ‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡ßß ‡¶ì ‡ß® ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶Ü‡¶á‡¶ü‡ßá‡¶Æ ‡¶≤‡¶æ‡¶ó‡¶¨‡ßá‡•§
    model: ‡¶Ü‡¶™‡¶®‡¶ø ‡¶ï‡¶ø ‡¶Æ‡ßá‡¶®‡ßç‡¶Ø‡ßÅ‡¶∞ ‡ßß ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ (‡¶ö‡¶ø‡¶ï‡ßá‡¶® ‡¶∞‡ßã‡¶≤) ‡¶è‡¶¨‡¶Ç ‡ß® ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ (‡¶≠‡ßá‡¶ú‡¶ø‡¶ü‡ßá‡¶¨‡¶≤ ‡¶∞‡ßã‡¶≤) ‡¶Ü‡¶á‡¶ü‡ßá‡¶Æ‡¶ó‡ßÅ‡¶≤‡ßã ‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶ö‡¶æ‡¶®?
    user: ‡¶ú‡ßç‡¶¨‡¶ø
    model: ‡¶Ö‡¶¨‡¶∂‡ßç‡¶Ø‡¶á! ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¶‡ßÅ‡¶ü‡¶ø ‡¶Ü‡¶á‡¶ü‡ßá‡¶Æ‡ßá‡¶∞ ‡¶Æ‡ßã‡¶ü ‡¶¶‡¶æ‡¶Æ ‡¶Ü‡¶∏‡¶õ‡ßá:\n- ‡¶ö‡¶ø‡¶ï‡ßá‡¶® ‡¶∞‡ßã‡¶≤ (‡ßß ‡¶™‡ßç‡¶Ø‡¶æ‡¶ï‡ßá‡¶ü): ‡ß®‡ß®‡ß´ ‡¶ü‡¶æ‡¶ï‡¶æ\n- ‡¶≠‡ßá‡¶ú‡¶ø‡¶ü‡ßá‡¶¨‡¶≤ ‡¶∞‡ßã‡¶≤ (‡ßß ‡¶™‡ßç‡¶Ø‡¶æ‡¶ï‡ßá‡¶ü): ‡ßß‡ß´‡ß¶ ‡¶ü‡¶æ‡¶ï‡¶æ\n- ‡¶°‡ßá‡¶≤‡¶ø‡¶≠‡¶æ‡¶∞‡¶ø ‡¶ö‡¶æ‡¶∞‡ßç‡¶ú: ‡ß¨‡ß¶ ‡¶ü‡¶æ‡¶ï‡¶æ\n\n‡¶∏‡¶∞‡ßç‡¶¨‡¶Æ‡ßã‡¶ü: ‡ß®‡ß®‡ß´ + ‡ßß‡ß´‡ß¶ + ‡ß¨‡ß¶ = ‡ß™‡ß©‡ß´ ‡¶ü‡¶æ‡¶ï‡¶æ‡•§ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞‡¶ü‡¶ø ‡¶ï‡¶®‡¶´‡¶æ‡¶∞‡ßç‡¶Æ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶®‡¶æ‡¶Æ, ‡¶†‡¶ø‡¶ï‡¶æ‡¶®‡¶æ ‡¶ì ‡¶´‡ßã‡¶® ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶¶‡¶ø‡¶®‡•§
    user: ‡¶®‡¶æ‡¶Æ: Rahim, ‡¶†‡¶ø‡¶ï‡¶æ‡¶®‡¶æ: Dhaka, ‡¶´‡ßã‡¶®: 123
    model: [ORDER_CONFIRMATION]\n[BILL:435]\n[DETAILS:‡¶®‡¶æ‡¶Æ=Rahim, ‡¶†‡¶ø‡¶ï‡¶æ‡¶®‡¶æ=Dhaka, ‡¶´‡ßã‡¶®=123]

    ### ‡¶™‡ßÇ‡¶∞‡ßç‡¶¨‡ßá‡¶∞ ‡¶ï‡¶•‡ßã‡¶™‡¶ï‡¶•‡¶® ###
    {formatted_history}

    ### ‡¶®‡¶§‡ßÅ‡¶® ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ###
    user: "{message}"
    model: 
    """
    
    try:
        response = model.generate_content(prompt)
        return response.text
    except Exception as e:
        print(f"Gemini API Error: {e}")
        return "‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§, ‡¶è‡¶ï‡¶ü‡¶ø ‡¶™‡ßç‡¶∞‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§‡¶ø‡¶ó‡¶§ ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§"

# (‡¶¨‡¶æ‡¶ï‡¶ø ‡¶∏‡¶¨ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® ‡¶Ü‡¶ó‡ßá‡¶∞ ‡¶Æ‡¶§‡ßã‡¶á ‡¶•‡¶æ‡¶ï‡¶¨‡ßá)
def get_chat_history_count(sender_id):
    if client:
        return chat_history_collection.count_documents({'sender_id': sender_id})
    return 0

def save_message_to_db(sender_id, role, content):
    if client:
        chat_history_collection.insert_one({'sender_id': sender_id,'role': role,'content': content,'timestamp': datetime.utcnow()})

def get_chat_history(sender_id, limit=6):
    if client:
        history_cursor = chat_history_collection.find({'sender_id': sender_id}).sort('timestamp', -1).limit(limit)
        history = []
        for doc in history_cursor:
            role = doc.get('role')
            if role == 'assistant':
                role = 'model'
            history.append({'role': role, 'content': doc.get('content')})
        return history
    return []
    
def save_customer_details(sender_id, details_str):
    try:
        details = dict(item.split("=") for item in details_str.strip().split(", "))
        if client:
            update_data = {
                'name': details.get('‡¶®‡¶æ‡¶Æ'),
                'address': details.get('‡¶†‡¶ø‡¶ï‡¶æ‡¶®‡¶æ'),
                'phone': details.get('‡¶´‡ßã‡¶®'),
                'last_updated': datetime.utcnow(),
            }
            update_data = {k: v for k, v in update_data.items() if v is not None}
            customer_details_collection.update_one(
                {'sender_id': sender_id},
                {'$set': update_data},
                upsert=True)
    except Exception as e:
        print(f"‡¶ó‡ßç‡¶∞‡¶æ‡¶π‡¶ï‡ßá‡¶∞ ‡¶§‡¶•‡ßç‡¶Ø ‡¶™‡¶æ‡¶∞‡ßç‡¶∏ ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ: {e}")

def get_saved_customer_details(sender_id):
    if client:
        return customer_details_collection.find_one({'sender_id': sender_id})
    return None

def send_otn_request(recipient_id):
    params = {'access_token': FACEBOOK_PAGE_ACCESS_TOKEN}
    headers = {'Content-Type': 'application/json'}
    data = {'recipient': {'id': recipient_id},'message': {"attachment": {"type": "template","payload": {"template_type": "one_time_notif_req","title": "‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶™‡¶∞‡¶¨‡¶∞‡ßç‡¶§‡ßÄ ‡¶Ö‡¶´‡¶æ‡¶∞ ‡¶∏‡¶Æ‡ßç‡¶™‡¶∞‡ßç‡¶ï‡ßá ‡¶ú‡¶æ‡¶®‡¶§‡ßá ‡¶ö‡¶æ‡¶®?","payload": "notify_me_payload" }}}}
    try:
        requests.post(GRAPH_API_URL, params=params, headers=headers, json=data)
    except Exception:
        pass

def send_telegram_notification(order_details):
    if not TELEGRAM_USERNAME or not CALLMEBOT_API_KEY:
        return
    message_body = f"*‡¶®‡¶§‡ßÅ‡¶® ‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞ ‡¶è‡¶∏‡ßá‡¶õ‡ßá!*\n\n{order_details.replace('[ORDER_CONFIRMATION]', '').strip()}"
    encoded_message = urllib.parse.quote_plus(message_body)
    api_url = f"https://api.callmebot.com/text.php?user={TELEGRAM_USERNAME}&text={encoded_message}&apikey={CALLMEBOT_API_KEY}"
    try:
        requests.get(api_url, timeout=10)
    except Exception:
        pass

def get_or_create_label_id(label_name):
    get_labels_url = f"https://graph.facebook.com/v19.0/me/custom_labels"
    params = {'fields': 'name', 'access_token': FACEBOOK_PAGE_ACCESS_TOKEN}
    try:
        response = requests.get(get_labels_url, params=params, timeout=10)
        response.raise_for_status()
        existing_labels = response.json().get('data', [])
        for label in existing_labels:
            if label.get('name') == label_name:
                return label.get('id')
        create_label_url = f"https://graph.facebook.com/v19.0/me/custom_labels"
        data = {'name': label_name}
        response = requests.post(create_label_url, params={'access_token': FACEBOOK_PAGE_ACCESS_TOKEN}, json=data, timeout=10)
        response.raise_for_status()
        new_label = response.json()
        return new_label.get('id')
    except requests.exceptions.RequestException:
        return None

def apply_date_label(user_psid):
    today_label_name = datetime.now().strftime("%d-%m-%Y")
    label_id = get_or_create_label_id(today_label_name)
    if not label_id:
        return
    apply_label_url = f"https://graph.facebook.com/v19.0/{label_id}/label"
    params = {'user': user_psid, 'access_token': FACEBOOK_PAGE_ACCESS_TOKEN}
    try:
        response = requests.post(apply_label_url, params=params, timeout=10)
        response.raise_for_status()
    except Exception:
        pass

def send_facebook_message(recipient_id, message_text):
    params = {'access_token': FACEBOOK_PAGE_ACCESS_TOKEN}
    headers = {'Content-Type': 'application/json'}
    data = {'recipient': {'id': recipient_id},'message': {'text': message_text},'messaging_type': 'RESPONSE'}
    try:
        requests.post(GRAPH_API_URL, params=params, headers=headers, json=data, timeout=10)
    except Exception:
        pass

