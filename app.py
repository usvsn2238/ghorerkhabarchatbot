import os
import requests
from flask import Flask, request
from dotenv import load_dotenv
import urllib.parse
from datetime import datetime
from pymongo import MongoClient
import re
from groq import Groq
import certifi

# .env ржлрж╛ржЗрж▓ ржерзЗржХрзЗ Environment Variables рж▓рзЛржб ржХрж░рж╛рж░ ржЬржирзНржп
load_dotenv()

# Flask ржЕрзНржпрж╛ржк ржЗржирж┐рж╢рж┐рзЯрж╛рж▓рж╛ржЗржЬ ржХрж░рж╛
app = Flask(__name__)

# Environment Variables ржерзЗржХрзЗ Key ржПржмржВ Token ржЧрзБрж▓рзЛ ржирзЗржУрзЯрж╛
FACEBOOK_PAGE_ACCESS_TOKEN = os.getenv('FACEBOOK_PAGE_ACCESS_TOKEN')
VERIFY_TOKEN = os.getenv('VERIFY_TOKEN')
GROQ_API_KEY = os.getenv('GROQ_API_KEY')
MONGO_URI = os.getenv('MONGO_URI')
TELEGRAM_USERNAME = os.getenv('TELEGRAM_USERNAME')
CALLMEBOT_API_KEY = os.getenv('CALLMEBOT_API_KEY')
GROQ_MODEL_NAME = os.getenv('GROQ_MODEL_NAME', 'llama-3.1-8b-instant')


# --- ржбрзЗржЯрж╛ржмрзЗрж╕ ржХрж╛ржирзЗржХрж╢ржи ---
try:
    ca = certifi.where()
    client = MongoClient(MONGO_URI, tlsCAFile=ca)
    db = client.chatbot_db
    chat_history_collection = db.chat_history
    otn_tokens_collection = db.otn_tokens
    customer_details_collection = db.customer_details
    print("MongoDB ржбрзЗржЯрж╛ржмрзЗрж╕рзЗрж░ рж╕рж╛ржерзЗ рж╕ржлрж▓ржнрж╛ржмрзЗ рж╕ржВржпрзБржХрзНрждред")
except Exception as e:
    print(f"MongoDB рж╕ржВржпрзЛржЧрзЗ рж╕ржорж╕рзНржпрж╛: {e}")
    client = None
# -------------------------

# --- ржзрж╛ржк рзз: рж╕рж╛ржзрж╛рж░ржг ржкрзНрж░рж╢рзНржирзЗрж░ ржЬржирзНржп ржирж┐рж░рзНржжрж┐рж╖рзНржЯ ржЙрждрзНрждрж░ (FAQ) ---
FAQ_RESPONSES = {
    ("hi", "hello", "┘З╪з┘К", "┘З┘Д┘И", "ржЖрж╕рж╕рж╛рж▓рж╛ржорзБ ржЖрж▓рж╛ржЗржХрзБржо"): "ржЖрж╕рж╕рж╛рж▓рж╛ржорзБ ржЖрж▓рж╛ржЗржХрзБржо, рж╕рзНржпрж╛рж░/ржорзНржпрж╛ржо! ЁЯШК ржЖржкржирж╛ржХрзЗ ржХрж┐ржнрж╛ржмрзЗ рж╕рж╛рж╣рж╛ржпрзНржп ржХрж░рждрзЗ ржкрж╛рж░рж┐?",
    ("thanks", "thank you", "╪┤┘Г╪▒╪з", "ржзржирзНржпржмрж╛ржж"): "ржЖржкржирж╛ржХрзЗ рж╕рж╛рж╣рж╛ржпрзНржп ржХрж░рждрзЗ ржкрзЗрж░рзЗ ржЖржорж░рж╛ ржЖржиржирзНржжрж┐ржд!",
}

# --- ржирждрзБржи: рж╕ржорзНржкрзВрж░рзНржг ржорзЗржирзНржпрзБ ржПржХржЯрж┐ ржнрзНржпрж╛рж░рж┐рзЯрзЗржмрж▓рзЗ рж░рж╛ржЦрж╛ ---
FULL_MENU_TEXT = """
ржЖрж╕рж╕рж╛рж▓рж╛ржорзБ ржЖрж▓рж╛ржЗржХрзБржо 
ржЖржкржирж╛ржжрзЗрж░ ржЬржирзНржп ржирж┐рзЯрзЗ ржПрж╕рзЗржЫрж┐ рж╕рзБрж╕рзНржмрж╛ржжрзБ ржПржмржВ рж╕рзНржмрж╛рж╕рзНржерзНржпржХрж░ ржлрзНрж░рзЛржЬрзЗржи ржлрзБржбрзЗрж░ ржорзЗржирзНржпрзБред ржирж┐ржЪрзЗ ржЖржорж╛ржжрзЗрж░ ржорзЗржирзНржпрзБ рж▓рж┐рж╕рзНржЯ ржжрзЗржУрзЯрж╛ рж╣рж▓рзЛ:
рзз) ржЪрж┐ржХрзЗржи рж░рзЛрж▓ рззрзл ржкрж┐рж╕рзЗрж░ ржкрзНржпрж╛ржХ    рзирзирзл ржЯрж╛ржХрж╛
рзи) ржнрзЗржЬрж┐ржЯрзЗржмрж▓ рж░рзЛрж▓ рззрзл ржкрж┐рж╕рзЗрж░ ржкрзНржпрж╛ржХ рззрзлрзж ржЯрж╛ржХрж╛
рзй) ржмрж┐ржл рж░рзЛрж▓ рззрзж ржкрж┐рж╕рзЗрж░ ржкрзНржпрж╛ржХ рзирзлрзж ржЯрж╛ржХрж╛ 
рзк) ржЪрж┐ржХрзЗржи рж╕ржорзБржЪрж╛ рззрзл ржкрж┐рж╕рзЗрж░ ржкрзНржпрж╛ржХ рзирзирзл ржЯрж╛ржХрж╛ 
рзл) ржнрзЗржЬрж┐ржЯрзЗржмрж▓ рж╕ржорзБржЪрж╛ рззрзл ржкрж┐рж╕рзЗрж░ ржкрзНржпрж╛ржХ рззрзлрзж ржЯрж╛ржХрж╛ 
рзм) ржмрж┐ржл рж╕ржорзБржЪрж╛ рззрзж ржкрж┐рж╕рзЗрж░ ржкрзНржпрж╛ржХ рзирзлрзж ржЯрж╛ржХрж╛ 
рзн) ржЪрж┐ржХрзЗржи рж╕рж┐ржЩрзНржЧрж╛рж░рж╛ рззрзж ржкрж┐рж╕рзЗрж░  ржкрзНржпрж╛ржХ рззрзлрзж ржЯрж╛ржХрж╛ 
рзо) ржЖрж▓рзБ рж╕рж┐ржЩрзНржЧрж╛рж░рж╛ рззрзж ржкрж┐рж╕рзЗрж░ ржкрзНржпрж╛ржХ рззрзжрзж ржЯрж╛ржХрж╛ 
рзп) ржЪрж┐ржХрзЗржи ржХрж▓рж┐ржЬрж╛ рж╕рж┐ржЩрзНржЧрж╛рж░рж╛ рззрзж ржкрж┐рж╕рзЗрж░ ржкрзНржпрж╛ржХ рззрзмрзж ржЯрж╛ржХрж╛ ред
рззрзж) ржЖрж▓рзБ ржкрзБрж░рж┐  рзирзж ржкрж┐рж╕рзЗрж░ ржкрзНржпрж╛ржХ рззрзмрзж ржЯрж╛ржХрж╛ 
рззрзз) ржбрж╛рж▓ ржкрзБрж░рж┐ рзирзж ржкрж┐рж╕рзЗрж░ ржкрзНржпрж╛ржХ рззрзмрзж ржЯрж╛ржХрж╛ 
рззрзи) ржЪрж┐ржХрзЗржи ржирж╛ржЧрзЗржЯрж╕ рззрзи ржкрж┐рж╕рзЗрж░ ржкрзНржпрж╛ржХ рзирзкрзж ржЯрж╛ржХрж╛ 
рззрзй) ржЪрж┐ржХрзЗржи ржЯрж┐ржХрж┐ржпрж╝рж╛ ржХрж╛ржмрж╛ржм рззрзи ржкрж┐рж╕рзЗрж░ ржкрзНржпрж╛ржХ рзирзкрзж ржЯрж╛ржХрж╛
рззрзк) ржЪрж┐ржХрзЗржи ржЭрж╛рж▓ ржбрзЛржирж╛ржЯ  рззрзи ржкрж┐рж╕рзЗрж░ ржкрзНржпрж╛ржХ рзирзкрзж ржЯрж╛ржХрж╛
рззрзл) ржЪрж┐ржХрзЗржи ржХрж╛ржЯрж▓рзЗржЯ рззрзи ржкрж┐рж╕рзЗрж░ ржкрзНржпрж╛ржХ рзирзкрзж ржЯрж╛ржХрж╛ ред 
рззрзм) ржЪрж╛рж░ржХрзЛржирж╛ ржкрж░рзЛржЯрж╛  
      ржХ)рзирзж ржкрж┐рж╕рзЗрж░ ржкрзНржпрж╛ржХ(рззрзирзжрзжgm )220ржЯрж╛ржХрж╛ ред
      ржЦ)рзирзж ржкрж┐рж╕рзЗрж░ ржкрзНржпрж╛ржХ (рззрзлрзжрзж gm) 260ржЯрж╛ржХрж╛ред
      ржЧ) рззрзж ржкрж┐рж╕ ржЖрж▓рзБ ржкрж░рзЛржЯрж╛ рзирзлрзж ржЯрж╛ржХрж╛
рззрзн) ржЖржЯрж╛ рж░рзБржЯрж┐ рзирзж ржкрж┐рж╕рзЗрж░ ржкрзНржпрж╛ржХ рззрзмрзж ржЯрж╛ржХрж╛ 
рззрзо) ржоржпрж╝ржжрж╛ рж░рзБржЯрж┐ рзирзж ржкрж┐рж╕рзЗрж░ ржкрзНржпрж╛ржХ рззрзорзж ржЯрж╛ржХрж╛ 
рззрзп) рж▓рж╛рж▓ ржЖржЯрж╛ рж░рзБржЯрж┐  рзирзж ржкрж┐рж╕рзЗрж░ ржкрзНржпрж╛ржХ рззрзорзж ржЯрж╛ржХрж╛ 
рзирзж) ржЪрж╛ржЙрж▓рзЗрж░ рж░рзБржЯрж┐ рзирзж ржкрж┐рж╕рзЗрж░ ржкрзНржпрж╛ржХ 200 ржЯрж╛ржХрж╛ 
рзирзз) ржкрж╛ржЯрж┐ рж╕рж╛ржкржЯрж╛ рззрзж ржкрж┐рж╕рзЗрж░ ржкрзНржпрж╛ржХ рзирзжрзж ржЯрж╛ржХрж╛
рзирзи) ржЕржирзНржержи рззрзж ржкрж┐рж╕рзЗрж░ ржкрзНржпрж╛ржХ рззрзлрзж ржЯрж╛ржХрж╛ 
рзирзй) рж╕рзБржЬрж┐рж░ рж╣рж╛рж▓рзБржпрж╝рж╛ рзкрзжрзж ржЯрж╛ржХрж╛ ржХрзЗржЬрж┐ 
рзирзк) ржЧрж╛ржЬрж░рзЗрж░ рж╣рж╛рж▓рзБржпрж╝рж╛ рзорзжрзж ржЯрж╛ржХрж╛ ржХрзЗржЬрж┐ 
рзирзл) ржмрзБржЯрзЗрж░ рж╣рж╛рж▓рзБржпрж╝рж╛ рзнрзжрзж ржЯрж╛ржХрж╛ ржХрзЗржЬрж┐ 
(ржмрж┐: ржжрзНрж░ржГ ржХржоржкржХрзНрж╖рзЗ ржпрзЗ ржХрзЛржи рзи ржкрзНржпрж╛ржХ ржЕрж░рзНржбрж╛рж░ ржХрж░рждрзЗ рж╣ржмрзЗ)
"""

# --- ржзрж╛ржк рзи: ржирж┐рж░рзНржжрж┐рж╖рзНржЯ ржЖржЗржЯрзЗржо рж╕ржорзНржкрж░рзНржХрзЗ ржкрзНрж░рж╢рзНржирзЗрж░ ржЬржирзНржп ржХрж╛ржарж╛ржорзЛржмржжрзНржз ржЬрзНржЮрж╛ржи (AI ржЫрж╛рзЬрж╛ ржЙрждрзНрждрж░) ---
STRUCTURED_KNOWLEDGE = [
    # ржорзЗржирзНржпрзБ ржЖржЗржЯрзЗржо
    {"name": "ржЪрж┐ржХрзЗржи рж░рзЛрж▓", "price": 225, "keywords": ["chicken roll", "ржЪрж┐ржХрзЗржи рж░рзЛрж▓"]},
    {"name": "ржнрзЗржЬрж┐ржЯрзЗржмрж▓ рж░рзЛрж▓", "price": 150, "keywords": ["vegetable roll", "ржнрзЗржЬрж┐ржЯрзЗржмрж▓ рж░рзЛрж▓", "рж╕ржмржЬрж┐ рж░рзЛрж▓"]},
    {"name": "ржмрж┐ржл рж░рзЛрж▓", "price": 250, "keywords": ["beef roll", "ржмрж┐ржл рж░рзЛрж▓"]},
    {"name": "ржЪрж┐ржХрзЗржи рж╕ржорзБржЪрж╛", "price": 225, "keywords": ["chicken somusa", "ржЪрж┐ржХрзЗржи рж╕ржорзБржЪрж╛"]},
    {"name": "ржнрзЗржЬрж┐ржЯрзЗржмрж▓ рж╕ржорзБржЪрж╛", "price": 150, "keywords": ["vegetable somusa", "ржнрзЗржЬрж┐ржЯрзЗржмрж▓ рж╕ржорзБржЪрж╛", "рж╕ржмржЬрж┐ рж╕ржорзБржЪрж╛"]},
    {"name": "ржмрж┐ржл рж╕ржорзБржЪрж╛", "price": 250, "keywords": ["beef somusa", "ржмрж┐ржл рж╕ржорзБржЪрж╛"]},
    {"name": "ржЪрж┐ржХрзЗржи рж╕рж┐ржЩрзНржЧрж╛рж░рж╛", "price": 150, "keywords": ["chicken singara", "ржЪрж┐ржХрзЗржи рж╕рж┐ржЩрзНржЧрж╛рж░рж╛"]},
    {"name": "ржЖрж▓рзБ рж╕рж┐ржЩрзНржЧрж╛рж░рж╛", "price": 100, "keywords": ["alu singara", "ржЖрж▓рзБ рж╕рж┐ржЩрзНржЧрж╛рж░рж╛"]},
    {"name": "ржЪрж┐ржХрзЗржи ржХрж▓рж┐ржЬрж╛ рж╕рж┐ржЩрзНржЧрж╛рж░рж╛", "price": 160, "keywords": ["chicken kolija singara", "ржЪрж┐ржХрзЗржи ржХрж▓рж┐ржЬрж╛ рж╕рж┐ржЩрзНржЧрж╛рж░рж╛"]},
    {"name": "ржЖрж▓рзБ ржкрзБрж░рж┐", "price": 160, "keywords": ["alu puri", "ржЖрж▓рзБ ржкрзБрж░рж┐"]},
    {"name": "ржбрж╛рж▓ ржкрзБрж░рж┐", "price": 160, "keywords": ["dal puri", "ржбрж╛рж▓ ржкрзБрж░рж┐"]},
    {"name": "ржЪрж┐ржХрзЗржи ржирж╛ржЧрзЗржЯрж╕", "price": 240, "keywords": ["chicken nuggets", "ржЪрж┐ржХрзЗржи ржирж╛ржЧрзЗржЯрж╕"]},
    {"name": "ржЪрж┐ржХрзЗржи ржЯрж┐ржХрж┐ржпрж╝рж╛ ржХрж╛ржмрж╛ржм", "price": 240, "keywords": ["chicken tikia kabab", "ржЯрж┐ржХрж┐ржпрж╝рж╛ ржХрж╛ржмрж╛ржм"]},
    {"name": "ржЪрж┐ржХрзЗржи ржЭрж╛рж▓ ржбрзЛржирж╛ржЯ", "price": 240, "keywords": ["chicken jhal donut", "ржЭрж╛рж▓ ржбрзЛржирж╛ржЯ"]},
    {"name": "ржЪрж┐ржХрзЗржи ржХрж╛ржЯрж▓рзЗржЯ", "price": 240, "keywords": ["chicken cutlet", "ржЪрж┐ржХрзЗржи ржХрж╛ржЯрж▓рзЗржЯ"]},
    {"name": "ржЪрж╛рж░ржХрзЛржирж╛ ржкрж░рзЛржЯрж╛ (рззрзирзжрзжgm)", "price": 220, "keywords": ["porota", "ржкрж░рзЛржЯрж╛", "1200gm"]},
    {"name": "ржЪрж╛рж░ржХрзЛржирж╛ ржкрж░рзЛржЯрж╛ (рззрзлрзжрзжgm)", "price": 260, "keywords": ["porota", "ржкрж░рзЛржЯрж╛", "1500gm"]},
    {"name": "ржЖрж▓рзБ ржкрж░рзЛржЯрж╛", "price": 250, "keywords": ["alu porota", "ржЖрж▓рзБ ржкрж░рзЛржЯрж╛"]},
    {"name": "ржЖржЯрж╛ рж░рзБржЯрж┐", "price": 160, "keywords": ["ata ruti", "ржЖржЯрж╛ рж░рзБржЯрж┐"]},
    {"name": "ржоржпрж╝ржжрж╛ рж░рзБржЯрж┐", "price": 180, "keywords": ["moyda ruti", "ржоржпрж╝ржжрж╛ рж░рзБржЯрж┐"]},
    {"name": "рж▓рж╛рж▓ ржЖржЯрж╛ рж░рзБржЯрж┐", "price": 180, "keywords": ["lal ata ruti", "рж▓рж╛рж▓ ржЖржЯрж╛ рж░рзБржЯрж┐"]},
    {"name": "ржЪрж╛ржЙрж▓рзЗрж░ рж░рзБржЯрж┐", "price": 200, "keywords": ["chaler ruti", "ржЪрж╛ржЙрж▓рзЗрж░ рж░рзБржЯрж┐"]},
    {"name": "ржкрж╛ржЯрж┐ рж╕рж╛ржкржЯрж╛", "price": 200, "keywords": ["pati shapta", "ржкрж╛ржЯрж┐ рж╕рж╛ржкржЯрж╛"]},
    {"name": "ржЕржирзНржержи", "price": 150, "keywords": ["onthon", "ржЕржирзНржержи"]},
    {"name": "рж╕рзБржЬрж┐рж░ рж╣рж╛рж▓рзБржпрж╝рж╛", "price": 400, "keywords": ["sujir halua", "рж╕рзБржЬрж┐рж░ рж╣рж╛рж▓рзБржпрж╝рж╛"]},
    {"name": "ржЧрж╛ржЬрж░рзЗрж░ рж╣рж╛рж▓рзБржпрж╝рж╛", "price": 800, "keywords": ["gajorer halua", "ржЧрж╛ржЬрж░рзЗрж░ рж╣рж╛рж▓рзБржпрж╝рж╛"]},
    {"name": "ржмрзБржЯрзЗрж░ рж╣рж╛рж▓рзБржпрж╝рж╛", "price": 700, "keywords": ["buter halua", "ржмрзБржЯрзЗрж░ рж╣рж╛рж▓рзБржпрж╝рж╛"]},
    
    # ржкрж▓рж┐рж╕рж┐ ржПржмржВ ржЕржирзНржпрж╛ржирзНржп рждржерзНржп
    {"name": "ржбрзЗрж▓рж┐ржнрж╛рж░рж┐ ржЪрж╛рж░рзНржЬ", "price": 60, "keywords": ["delivery", "charge", "cost", "ржбрзЗрж▓рж┐ржнрж╛рж░рж┐", "ржЪрж╛рж░рзНржЬ", "ржЦрж░ржЪ"]},
    # ржЖржкржирж┐ ржПржЦрж╛ржирзЗ ржЖрж░ржУ рждржерзНржп ржпрзЛржЧ ржХрж░рждрзЗ ржкрж╛рж░рзЗржи, ржпрзЗржоржи:
    # {"name": "ржбрзЗрж▓рж┐ржнрж╛рж░рж┐ ржПрж▓рж╛ржХрж╛", "info": "ржЖржорж░рж╛ ржорж┐рж░ржкрзБрж░, ржЙрждрзНрждрж░рж╛...", "keywords": ["area", "location", "ржПрж▓рж╛ржХрж╛"]}
]
INTENT_KEYWORDS = {
    "get_price": ["price", "dam", "ржжрж╛ржо", "ржЦрж░ржЪ", "ржХржд", "ржкрзНрж░рж╛ржЗрж╕"],
    "get_menu": ["menu", "list", "items", "ржорзЗржирзНржпрзБ", "рждрж╛рж▓рж┐ржХрж╛", "ржЦрж╛ржмрж╛рж░"]
}
# -----------------------------------------------------------------

# Groq ржХрзНрж▓рж╛рзЯрзЗржирзНржЯ ржХржиржлрж┐ржЧрж╛рж░ ржХрж░рж╛
try:
    groq_client = Groq(api_key=GROQ_API_KEY)
    print("Groq AI ржХрзНрж▓рж╛рзЯрзЗржирзНржЯ рж╕ржлрж▓ржнрж╛ржмрзЗ рж▓рзЛржб рж╣рзЯрзЗржЫрзЗред")
except Exception as e:
    print(f"Groq AI ржХржиржлрж┐ржЧрж╛рж░рзЗрж╢ржирзЗ рж╕ржорж╕рзНржпрж╛ рж╣рзЯрзЗржЫрзЗ: {e}")
    groq_client = None

GRAPH_API_URL = 'https://graph.facebook.com/v18.0/me/messages'

def find_faq_response(message):
    lower_message = message.lower()
    for keywords, response in FAQ_RESPONSES.items():
        for keyword in keywords:
            if re.search(r'\b' + re.escape(keyword) + r'\b', lower_message):
                return response
    return None

def handle_structured_query(message):
    lower_message = message.lower()
    
    is_price_query = any(re.search(r'\b' + kw + r'\b', lower_message) for kw in INTENT_KEYWORDS["get_price"])
    is_menu_query = any(re.search(r'\b' + kw + r'\b', lower_message) for kw in INTENT_KEYWORDS["get_menu"])

    # ржпржжрж┐ ржХрзЗржЙ ржорзЗржирзНржпрзБ ржЪрж╛рзЯ
    if is_menu_query:
        return FULL_MENU_TEXT

    # ржпржжрж┐ ржХрзЗржЙ ржжрж╛ржо ржЬрж╛ржирждрзЗ ржЪрж╛рзЯ
    if is_price_query:
        found_items = []
        for item in STRUCTURED_KNOWLEDGE:
            for keyword in item["keywords"]:
                if re.search(r'\b' + keyword + r'\b', lower_message):
                    found_items.append(f"{item['name']}-ржПрж░ ржжрж╛ржо {item['price']} ржЯрж╛ржХрж╛ред")
        
        # ржпржжрж┐ ржирж┐рж░рзНржжрж┐рж╖рзНржЯ ржХрзЛржирзЛ ржЖржЗржЯрзЗржорзЗрж░ ржирж╛ржо ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯ
        if found_items:
            return "\n".join(found_items)
        # ржпржжрж┐ рж╢рзБржзрзБ "ржжрж╛ржо ржХржд" ржмрж╛ "ржкрзНрж░рж╛ржЗрж╕ рж▓рж┐рж╕рзНржЯ" ржмрж▓рзЗ, рждрж╛рж╣рж▓рзЗ ржкрзБрж░рзЛ ржорзЗржирзНржпрзБ ржжрзЗржУрзЯрж╛ рж╣ржмрзЗ
        else:
            return FULL_MENU_TEXT

    # ржЖржкржирж┐ ржПржЦрж╛ржирзЗ ржЕржирзНржпрж╛ржирзНржп ржЙржжрзНржжрзЗрж╢рзНржп ржпрзЛржЧ ржХрж░рждрзЗ ржкрж╛рж░рзЗржи
    return None


@app.route('/')
def home():
    return 'рж╕рж╛рж░рзНржнрж╛рж░ржЯрж┐ рж╕ржлрж▓ржнрж╛ржмрзЗ ржЪрж▓ржЫрзЗ!', 200

@app.route('/webhook', methods=['GET', 'POST'])
def webhook():
    if request.method == 'GET':
        if request.args.get('hub.verify_token') == VERIFY_TOKEN:
            return request.args.get('hub.challenge'), 200
        else:
            return 'ржнрзЗрж░рж┐ржлрж┐ржХрзЗрж╢ржи ржЯрзЛржХрзЗржи ржнрзБрж▓', 403
    
    if request.method == 'POST':
        data = request.get_json()
        if data and data.get('object') == 'page':
            for entry in data.get('entry', []):
                for messaging_event in entry.get('messaging', []):
                    sender_id = messaging_event['sender']['id']
                    
                    if messaging_event.get('optin'):
                        # ... (OTN ржХрзЛржб)
                        continue

                    if messaging_event.get('message'):
                        message_text = messaging_event['message'].get('text')
                        if message_text:
                            # --- ржирждрзБржи ржХрж╛рж░рзНржпржкрзНрж░ржгрж╛рж▓рзА ---
                            # ржзрж╛ржк рзз: рж╕рж╛ржзрж╛рж░ржг FAQ ржкрж░рзАржХрзНрж╖рж╛
                            faq_answer = find_faq_response(message_text)
                            if faq_answer:
                                send_facebook_message(sender_id, faq_answer)
                                continue

                            # ржзрж╛ржк рзи: ржирж┐рж░рзНржжрж┐рж╖рзНржЯ ржкрзНрж░рж╢рзНржирзЗрж░ (ржжрж╛ржо, ржорзЗржирзНржпрзБ ржЗрждрзНржпрж╛ржжрж┐) ржЙрждрзНрждрж░ ржжрзЗржУрзЯрж╛
                            structured_answer = handle_structured_query(message_text)
                            if structured_answer:
                                send_facebook_message(sender_id, structured_answer)
                                continue
                            
                            # ржзрж╛ржк рзй: ржпржжрж┐ ржЙржкрж░рзЗрж░ ржХрзЛржирзЛржЯрж┐ржЗ ржХрж╛ржЬ ржирж╛ ржХрж░рзЗ, рждржмрзЗржЗ AI ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛
                            save_message_to_db(sender_id, 'user', message_text)
                            if groq_client:
                                try:
                                    bot_response = get_groq_response(sender_id, message_text)
                                    save_message_to_db(sender_id, 'assistant', bot_response)
                                    
                                    user_facing_response = bot_response
                                    if "[ORDER_CONFIRMED]" in bot_response:
                                        send_telegram_notification(bot_response)
                                        apply_date_label(sender_id)
                                        details_match = re.search(r'\[DETAILS:(.*?)\]', bot_response)
                                        if details_match:
                                            details_str = details_match.group(1)
                                            save_customer_details(sender_id, details_str)
                                        user_facing_response = re.sub(r'\[.*?\]', '', bot_response).strip()
                                        send_otn_request(sender_id)
                                    send_facebook_message(sender_id, user_facing_response)

                                except Exception as e:
                                    print(f"Groq ржерзЗржХрзЗ ржЙрждрзНрждрж░ ржЖржирждрзЗ рж╕ржорж╕рзНржпрж╛ рж╣рзЯрзЗржЫрзЗ: {e}")
                                    send_facebook_message(sender_id, "ржжрзБржГржЦрж┐ржд, ржПржЗ ржорзБрж╣рзВрж░рзНрждрзЗ ржЙрждрзНрждрж░ ржжрж┐рждрзЗ ржкрж╛рж░ржЫрж┐ ржирж╛ред")
        return 'Event received', 200

def get_groq_response(sender_id, message):
    history = get_chat_history(sender_id, limit=3)
    formatted_history = []
    for msg in history:
        if msg.get('role') and msg.get('content'):
            formatted_history.append({"role": msg.get('role'), "content": msg.get('content')})

    customer_details = get_saved_customer_details(sender_id)
    details_context = "ржПржЗ ржЧрзНрж░рж╛рж╣ржХрзЗрж░ ржХрзЛржирзЛ рждржерзНржп ржЖржорж╛ржжрзЗрж░ ржХрж╛ржЫрзЗ рж╕рзЗржн ржХрж░рж╛ ржирзЗржЗред"
    saved_address = ""
    if customer_details and customer_details.get('address'):
        saved_address = customer_details.get('address')
        details_context = f"ржПржЗ ржЧрзНрж░рж╛рж╣ржХрзЗрж░ ржПржХржЯрж┐ ржарж┐ржХрж╛ржирж╛ ржЖржорж╛ржжрзЗрж░ ржХрж╛ржЫрзЗ рж╕рзЗржн ржХрж░рж╛ ржЖржЫрзЗ: {saved_address}"

    # AI-ржХрзЗ ржПржЦржи рж╢рзБржзрзБ ржкрж▓рж┐рж╕рж┐ ржПржмржВ рж╕рж╛ржзрж╛рж░ржг ржирж┐рж░рзНржжрзЗрж╢ржирж╛ ржжрзЗржУрзЯрж╛ рж╣ржЪрзНржЫрзЗ
    KNOWLEDGE_BASE_FOR_AI = """
    ## ржкрж▓рж┐рж╕рж┐ ржПржмржВ ржкрзНрж░рж╛рзЯрж╢ржЗ ржЬрж┐ржЬрзНржЮрж╛рж╕рж┐ржд ржкрзНрж░рж╢рзНржи (FAQ)
    - **ржЕрж░рзНржбрж╛рж░ ржкрзНрж░рж╕рзЗрж╕рж┐ржВ рж╕ржорзЯ:** ржЕрж░рзНржбрж╛рж░ ржХржиржлрж╛рж░рзНржо рж╣ржУрзЯрж╛рж░ ржкрж░ рзирзк ржерзЗржХрзЗ рзнрзи ржШржгрзНржЯрж╛рж░ ржоржзрзНржпрзЗ ржбрзЗрж▓рж┐ржнрж╛рж░рж┐ ржХрж░рж╛ рж╣рзЯред
    - **ржкрзЗржорзЗржирзНржЯ:** ржЖржорж░рж╛ ржмрж░рзНрждржорж╛ржирзЗ рж╢рзБржзрзБржорж╛рждрзНрж░ ржХрзНржпрж╛рж╢ ржЕржи ржбрзЗрж▓рж┐ржнрж╛рж░рж┐ ржЧрзНрж░рж╣ржг ржХрж░рж┐ред
    - **ржпрзЛржЧрж╛ржпрзЛржЧ:** ржпрзЗржХрзЛржирзЛ ржкрзНрж░рзЯрзЛржЬржирзЗ ржЖржорж╛ржжрзЗрж░ ржкрзЗржЬрзЗ ржорзЗрж╕рзЗржЬ ржжрж┐ржиред
    """

    system_prompt = f"""
    ### ржЖржкржирж╛рж░ ржмрзНржпржХрзНрждрж┐рждрзНржм (Persona) ###
    ржЖржкржирж┐ "ржШрж░рзЗрж░ ржЦрж╛ржмрж╛рж░" ржПрж░ ржПржХржЬржи рж╣рзЗрж▓рзНржкржлрзБрж▓ ржоржбрж╛рж░рзЗржЯрж░ред ржЖржкржирж╛рж░ ржХржерж╛рж░ ржзрж░ржг рж╣ржмрзЗ ржШрж░рзЛрзЯрж╛ ржПржмржВ ржЖржирзНрждрж░рж┐ржХред

    ### ржЖржкржирж╛рж░ ржЬрзНржЮрж╛ржи (Knowledge Base) ###
    {KNOWLEDGE_BASE_FOR_AI}
    
    ### ржЧрзНрж░рж╛рж╣ржХрзЗрж░ рж╕рзЗржн ржХрж░рж╛ рждржерзНржп (Saved Customer Details) ###
    {details_context}

    ### ржЧрзБрж░рзБрждрзНржмржкрзВрж░рзНржг ржирж┐рж░рзНржжрзЗрж╢ржирж╛ (Strict Instructions) ###
    (ржПржЦрж╛ржирзЗ ржЖржкржирж╛рж░ ржЖржЧрзЗрж░ ржирж┐рж░рзНржжрзЗрж╢ржирж╛ржЧрзБрж▓рзЛ ржерж╛ржХржмрзЗ, ржпрзЗржоржи: ржЕрж░рзНржбрж╛рж░ ржХржиржлрж╛рж░рзНржорзЗрж╢ржи)
    
    ### ржЖржкржирж╛рж░ ржХрж╛ржЬ ###
    ржЖржкржирж╛рж░ ржХрж╛ржЫрзЗ ржПржоржи ржПржХржЯрж┐ ржкрзНрж░рж╢рзНржи ржПрж╕рзЗржЫрзЗ ржпрж╛рж░ ржЙрждрзНрждрж░ ржЖржкржирж╛рж░ ржирж┐рж░рзНржжрж┐рж╖рзНржЯ ржЬрзНржЮрж╛ржирзЗ ржирзЗржЗред рж╕рж╛ржзрж╛рж░ржг ржЬрзНржЮрж╛ржи ржПржмржВ ржЖржкржирж╛рж░ ржмрзНржпржХрзНрждрж┐рждрзНржм ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ ржПржХржЯрж┐ рж╕рж╛рж╣рж╛ржпрзНржпржХрж╛рж░рзА ржЙрждрзНрждрж░ ржжрж┐ржиред

    ### ржкрзВрж░рзНржмрзЗрж░ ржХржерзЛржкржХржержи ###
    {formatted_history}

    ### ржирждрзБржи ржорзЗрж╕рзЗржЬ ###
    user: "{message}"
    """
    
    messages_for_api = [
        {"role": "system", "content": system_prompt},
        *formatted_history,
        {"role": "user", "content": message}
    ]

    try:
        chat_completion = groq_client.chat.completions.create(
            messages=messages_for_api,
            model=GROQ_MODEL_NAME,
        )
        return chat_completion.choices[0].message.content
    except Exception as e:
        print(f"Groq API Error: {e}")
        return "ржжрзБржГржЦрж┐ржд, ржПржХржЯрж┐ ржкрзНрж░ржпрзБржХрзНрждрж┐ржЧржд рж╕ржорж╕рзНржпрж╛ рж╣рзЯрзЗржЫрзЗред ржЖржорж░рж╛ ржмрж┐рж╖рзЯржЯрж┐ ржжрзЗржЦржЫрж┐ред"

# (ржмрж╛ржХрж┐ рж╕ржм ржлрж╛ржВрж╢ржи ржЖржЧрзЗрж░ ржорждрзЛржЗ ржерж╛ржХржмрзЗ)
def save_customer_details(sender_id, details_str):
    try:
        details = dict(item.split("=") for item in details_str.strip().split(", "))
        if client:
            customer_details_collection.update_one(
                {'sender_id': sender_id},
                {'$set': {
                    'name': details.get('ржирж╛ржо'),
                    'address': details.get('ржарж┐ржХрж╛ржирж╛'),
                    'phone': details.get('ржлрзЛржи'),
                    'last_updated': datetime.utcnow()
                }},
                upsert=True
            )
    except Exception as e:
        print(f"ржЧрзНрж░рж╛рж╣ржХрзЗрж░ рждржерзНржп ржкрж╛рж░рзНрж╕ ржХрж░рждрзЗ рж╕ржорж╕рзНржпрж╛: {e}")

def get_saved_customer_details(sender_id):
    if client:
        details = customer_details_collection.find_one({'sender_id': sender_id})
        if details:
             return details
    return None

def save_message_to_db(sender_id, role, content):
    if client:
        chat_history_collection.insert_one({
            'sender_id': sender_id,
            'role': role,
            'content': content,
            'timestamp': datetime.utcnow()
        })

def get_chat_history(sender_id, limit=3):
    if client:
        history_cursor = chat_history_collection.find({'sender_id': sender_id}).sort('timestamp', -1).limit(limit)
        return list(history_cursor)[::-1]
    return []

def send_otn_request(recipient_id):
    params = {'access_token': FACEBOOK_PAGE_ACCESS_TOKEN}
    headers = {'Content-Type': 'application/json'}
    data = {
        'recipient': {'id': recipient_id},
        'message': {
            "attachment": {
                "type": "template",
                "payload": {
                    "template_type": "one_time_notif_req",
                    "title": "ржЖржорж╛ржжрзЗрж░ ржкрж░ржмрж░рзНрждрзА ржЕржлрж╛рж░ рж╕ржорзНржкрж░рзНржХрзЗ ржЬрж╛ржирждрзЗ ржЪрж╛ржи?",
                    "payload": "notify_me_payload" 
                }
            }
        }
    }
    try:
        requests.post(GRAPH_API_URL, params=params, headers=headers, json=data)
    except Exception:
        pass

def send_telegram_notification(order_details):
    if not TELEGRAM_USERNAME or not CALLMEBOT_API_KEY:
        return
    message_body = f"*ржирждрзБржи ржЕрж░рзНржбрж╛рж░ ржПрж╕рзЗржЫрзЗ!*\n\n{order_details.replace('[ORDER_CONFIRMED]', '').strip()}"
    encoded_message = urllib.parse.quote_plus(message_body)
    api_url = f"https://api.callmebot.com/text.php?user={TELEGRAM_USERNAME}&text={encoded_message}&apikey={CALLMEBOT_API_KEY}"
    try:
        requests.get(api_url, timeout=10)
    except Exception:
        pass

def get_or_create_label_id(label_name):
    get_labels_url = f"https://graph.facebook.com/v18.0/me/custom_labels"
    params = {'fields': 'name', 'access_token': FACEBOOK_PAGE_ACCESS_TOKEN}
    try:
        response = requests.get(get_labels_url, params=params, timeout=10)
        response.raise_for_status()
        existing_labels = response.json().get('data', [])
        for label in existing_labels:
            if label.get('name') == label_name:
                return label.get('id')
        create_label_url = f"https://graph.facebook.com/v18.0/me/custom_labels"
        data = {'name': label_name}
        response = requests.post(create_label_url, params={'access_token': FACEBOOK_PAGE_ACCESS_TOKEN}, json=data, timeout=10)
        response.raise_for_status()
        new_label = response.json()
        return new_label.get('id')
    except requests.exceptions.RequestException:
        return None

def apply_date_label(user_psid):
    today_label_name = datetime.now().strftime("%d-%m-%Y")
    label_id = get_or_create_label_id(today_label_name)
    if not label_id:
        return
    apply_label_url = f"https://graph.facebook.com/v18.0/{label_id}/label"
    params = {'user': user_psid, 'access_token': FACEBOOK_PAGE_ACCESS_TOKEN}
    try:
        response = requests.post(apply_label_url, params=params, timeout=10)
        response.raise_for_status()
    except Exception:
        pass

def send_facebook_message(recipient_id, message_text):
    params = {'access_token': FACEBOOK_PAGE_ACCESS_TOKEN}
    headers = {'Content-Type': 'application/json'}
    data = {
        'recipient': {'id': recipient_id},
        'message': {'text': message_text},
        'messaging_type': 'RESPONSE'
    }
    try:
        requests.post(GRAPH_API_URL, params=params, headers=headers, json=data, timeout=10)
    except Exception:
        pass

