import os
import requests
from flask import Flask, request
from dotenv import load_dotenv
import urllib.parse
from datetime import datetime
from pymongo import MongoClient
import re
import google.generativeai as genai
import certifi
import time

# .env ржлрж╛ржЗрж▓ ржерзЗржХрзЗ Environment Variables рж▓рзЛржб ржХрж░рж╛рж░ ржЬржирзНржп
load_dotenv()

# Flask ржЕрзНржпрж╛ржк ржЗржирж┐рж╢рж┐рзЯрж╛рж▓рж╛ржЗржЬ ржХрж░рж╛
app = Flask(__name__)

# Environment Variables ржерзЗржХрзЗ Key ржПржмржВ Token ржЧрзБрж▓рзЛ ржирзЗржУрзЯрж╛
FACEBOOK_PAGE_ACCESS_TOKEN = os.getenv('FACEBOOK_PAGE_ACCESS_TOKEN')
VERIFY_TOKEN = os.getenv('VERIFY_TOKEN')
GEMINI_API_KEY = os.getenv('GEMINI_API_KEY')
MONGO_URI = os.getenv('MONGO_URI')
TELEGRAM_USERNAME = os.getenv('TELEGRAM_USERNAME')
CALLMEBOT_API_KEY = os.getenv('CALLMEBOT_API_KEY')

# --- ржбрзЗржЯрж╛ржмрзЗрж╕ ржХрж╛ржирзЗржХрж╢ржи ---
try:
    ca = certifi.where()
    client = MongoClient(MONGO_URI, tlsCAFile=ca)
    db = client.chatbot_db
    chat_history_collection = db.chat_history
    otn_tokens_collection = db.otn_tokens
    customer_details_collection = db.customer_details
    knowledge_collection = db.knowledge_base
    print("MongoDB ржбрзЗржЯрж╛ржмрзЗрж╕рзЗрж░ рж╕рж╛ржерзЗ рж╕ржлрж▓ржнрж╛ржмрзЗ рж╕ржВржпрзБржХрзНрждред")
except Exception as e:
    print(f"MongoDB рж╕ржВржпрзЛржЧрзЗ рж╕ржорж╕рзНржпрж╛: {e}")
    client = None
# -------------------------

# --- ржирждрзБржи: рж╕рзНржмрзЯржВржХрзНрж░рж┐рзЯ ржкрзНрж░ржержо ржЙрждрзНрждрж░рзЗрж░ ржЬржирзНржп ржХрзАржУрзЯрж╛рж░рзНржб ржПржмржВ ржорзЗрж╕рзЗржЬ ---
WELCOME_KEYWORDS = ("hi", "hello", "┘З╪з┘К", "┘З┘Д┘И", "ржЖрж╕рж╕рж╛рж▓рж╛ржорзБ ржЖрж▓рж╛ржЗржХрзБржо", "ржжрж╛ржо", "price", "ржорзЗржирзНржпрзБ", "menu", "list", "talika")
POSITIVE_CONFIRMATIONS = ("ji", "jee", "yes", "рж╣рзНржпрж╛ржБ", "ржЬрзНржмрж┐", "ok", "okay", "hmm", "ржХржиржлрж╛рж░рзНржо", "confirm", "chai", "ржЪрж╛ржЗ")

# --- ржзрж╛ржк рзз: ржХрзАржУрзЯрж╛рж░рзНржб ржПржмржВ ржирж┐рж░рзНржжрж┐рж╖рзНржЯ ржмрж╛ржХрзНржпрзЗрж░ ржЬржирзНржп ржЙрждрзНрждрж░ (ржмрж┐ржирж╛ ржЦрж░ржЪрзЗ) ---
# ржЖржкржирж┐ ржПржЦрж╛ржирзЗ ржЖржкржирж╛рж░ ржкржЫржирзНржж ржЕржирзБржпрж╛рзЯрзА ржпржд ржЦрзБрж╢рж┐ рждржд ржХрзАржУрзЯрж╛рж░рзНржб ржПржмржВ ржЙрждрзНрждрж░ ржпрзЛржЧ ржХрж░рждрзЗ ржкрж╛рж░рзЗржиред
FAQ_RESPONSES = {
    # --- ржХрзАржУрзЯрж╛рж░рзНржбрзЗрж░ ржЧрзНрж░рзБржк ---       # --- ржирж┐рж░рзНржжрж┐рж╖рзНржЯ ржЙрждрзНрждрж░ ---
    ("hi", "hello", "┘З╪з┘К", "┘З┘Д┘И", "ржЖрж╕рж╕рж╛рж▓рж╛ржорзБ ржЖрж▓рж╛ржЗржХрзБржо"): "ржЖрж╕рж╕рж╛рж▓рж╛ржорзБ ржЖрж▓рж╛ржЗржХрзБржо, рж╕рзНржпрж╛рж░/ржорзНржпрж╛ржо! ЁЯШК ржЖржкржирж╛ржХрзЗ ржХрж┐ржнрж╛ржмрзЗ рж╕рж╛рж╣рж╛ржпрзНржп ржХрж░рждрзЗ ржкрж╛рж░рж┐?",
    ("thanks", "thank you", "╪┤┘Г╪▒╪з", "ржзржирзНржпржмрж╛ржж"): "ржЖржкржирж╛ржХрзЗ рж╕рж╛рж╣рж╛ржпрзНржп ржХрж░рждрзЗ ржкрзЗрж░рзЗ ржЖржорж░рж╛ ржЖржиржирзНржжрж┐ржд!",
    
    # --- ржЖржкржирж┐ ржПржЦрж╛ржирзЗ ржирждрзБржи ржирж┐рзЯржо ржпрзЛржЧ ржХрж░рзБржи ---
    ("ржХрзЗржоржи ржЖржЫрзЗржи", "ржХрзЗржоржи ржЖржЫрзЛ"): "ржЖржорж┐ ржнрж╛рж▓рзЛ ржЖржЫрж┐, ржзржирзНржпржмрж╛ржж! ржЖржкржирж╛ржХрзЗ ржХрж┐ржнрж╛ржмрзЗ рж╕рж╛рж╣рж╛ржпрзНржп ржХрж░рждрзЗ ржкрж╛рж░рж┐?",
    ("ржЖржкржирж╛рж░рж╛ ржХржЦржи ржЦрзЛрж▓рж╛ ржерж╛ржХрзЗржи", "ржХржЦржи ржЦрзЛрж▓рж╛", "ржХржЦржи ржмржирзНржз"): "ржЖржорж╛ржжрзЗрж░ ржЕржирж▓рж╛ржЗржи рж╕рзЗржмрж╛ рзирзк ржШржирзНржЯрж╛ржЗ ржЦрзЛрж▓рж╛ ржерж╛ржХрзЗред ржЖржкржирж┐ ржпрзЗржХрзЛржирзЛ рж╕ржорзЯ ржЕрж░рзНржбрж╛рж░ ржХрж░рждрзЗ ржкрж╛рж░рзЗржиред",
    ("ржЖржкржирж╛ржжрзЗрж░ ржжрзЛржХрж╛ржи ржХрзЛржерж╛рзЯ", "ржЖржЙржЯрж▓рзЗржЯ, ржХрзЛржерж╛рзЯ","ржарж┐ржХрж╛ржирж╛","address","рж╢рзЛ рж░рзБржо" "ржарж┐ржХрж╛ржирж╛ ржХрж┐"): "ржЖржорж╛ржжрзЗрж░ ржарж┐ржХрж╛ржирж╛: 1107 ржХрж╛ржБржарж╛рж▓рждрж▓рж╛, ржкрзВрж░рзНржм ржоржирж┐ржкрзБрж░, ржорж┐рж░ржкрзБрж░ рзиред рждржмрзЗ ржЖржорж░рж╛ ржорзВрж▓ржд ржЕржирж▓рж╛ржЗржи ржбрзЗрж▓рж┐ржнрж╛рж░рж┐ рж╕рзЗржмрж╛ ржжрж┐рзЯрзЗ ржерж╛ржХрж┐ред"
    ("ржЕрж░рзНржбрж╛рж░ ржХрж░рждрзЗ ржЪрж╛ржЗ","ржЕрж░рзНржбрж╛рж░ ржХрж┐ржнрж╛ржмрзЗ ржХрж░ржм", "order korte chai", "order korbo","ordar korbo"):"ржЕрж░рзНржбрж╛рж░ ржХрж░рждрзЗ ржкржирзНржпрзЗрж░ рждрж╛рж▓рж┐ржХрж╛, ржЖржкржирж╛рж░ ржирж╛ржо,ржмрж╛рж╕рж╛рж░ ржарж┐ржХрж╛ржирж╛ ржПржмржВ ржорзЛржмрж╛ржЗрж▓ ржирж╛ржорзНржмрж╛рж░ ржжрж┐ржи ржкрзНрж▓рж┐ржЬред"
    
}
# --------------------------------------------------------------------


WELCOME_MESSAGE_1 = """
ржЖрж╕рж╕рж╛рж▓рж╛ржорзБ ржЖрж▓рж╛ржЗржХрзБржо 
ржЖржкржирж╛ржжрзЗрж░ ржЬржирзНржп ржирж┐рзЯрзЗ ржПрж╕рзЗржЫрж┐ рж╕рзБрж╕рзНржмрж╛ржжрзБ ржПржмржВ рж╕рзНржмрж╛рж╕рзНржерзНржпржХрж░ ржлрзНрж░рзЛржЬрзЗржи ржлрзБржбрзЗрж░ ржорзЗржирзНржпрзБред ржирж┐ржЪрзЗ ржЖржорж╛ржжрзЗрж░ ржорзЗржирзНржпрзБ рж▓рж┐рж╕рзНржЯ ржжрзЗржУрзЯрж╛ рж╣рж▓рзЛ:
рзз) ржЪрж┐ржХрзЗржи рж░рзЛрж▓ рззрзл ржкрж┐рж╕рзЗрж░ ржкрзНржпрж╛ржХ    рзирзирзл ржЯрж╛ржХрж╛
рзи) ржнрзЗржЬрж┐ржЯрзЗржмрж▓ рж░рзЛрж▓ рззрзл ржкрж┐рж╕рзЗрж░ ржкрзНржпрж╛ржХ рззрзлрзж ржЯрж╛ржХрж╛
... (ржЖржкржирж╛рж░ рж╕ржорзНржкрзВрж░рзНржг ржорзЗржирзНржпрзБ ржПржЦрж╛ржирзЗ ржерж╛ржХржмрзЗ)
"""

WELCOME_MESSAGE_2 = "ржЕрж░рзНржбрж╛рж░ ржХржиржлрж╛рж░рзНржо ржХрж░рждрзЗ, ржкржгрзНржпрзЗрж░ ржирж╛ржо, ржЖржкржирж╛рж░ ржирж╛ржо, ржарж┐ржХрж╛ржирж╛, ржПржмржВ ржорзЛржмрж╛ржЗрж▓ ржирж╛ржорзНржмрж╛рж░ ржжрж┐рзЯрзЗ ржЖржорж╛ржжрзЗрж░ рж╕рж╣ржпрзЛржЧрж┐рждрж╛ ржХрж░рзБржиред"
ORDER_CONFIRMATION_TEMPLATE = "ржзржирзНржпржмрж╛ржж, ржЖржкржирж╛рж░ ржорзЛржЯ ржЪрж╛рж░рзНржЬ {} ржЯрж╛ржХрж╛ред\nржЖржкржирж┐ рзз ржерзЗржХрзЗ рзй ржжрж┐ржирзЗрж░ ржоржзрзНржпрзЗ ржкрзНрж░рзЛржбрж╛ржХрзНржЯрж╕ ржкрзЗржпрж╝рзЗ ржпрж╛ржмрзЗржиред\nржжржпрж╝рж╛ ржХрж░рзЗ ржХржиржлрж╛рж░рзНржо ржХрж░рж╛рж░ ржкрж░ ржХрзНржпрж╛ржирж╕рзЗрж▓ ржХрж░рж┐ржпрж╝рзЗржи ржирж╛, ржХрж╛рж░ржг ржЖржорж░рж╛ ржЕрж░рзНржбрж╛рж░ ржжрзЗржпрж╝рж╛рж░ ржкрж░ рждрзИрж░рж┐ ржХрж░рж┐ред"
# ----------------------------------------------------

# --- Gemini AI ржоржбрзЗрж▓ ржХржиржлрж┐ржЧрж╛рж░ ржХрж░рж╛ ---
try:
    genai.configure(api_key=GEMINI_API_KEY)
    model = genai.GenerativeModel('gemini-2.5-flash-lite') 
    print("Gemini AI ржоржбрзЗрж▓ (2.5 Flash-Lite) рж╕ржлрж▓ржнрж╛ржмрзЗ рж▓рзЛржб рж╣рзЯрзЗржЫрзЗред")
except Exception as e:
    print(f"Gemini AI ржХржиржлрж┐ржЧрж╛рж░рзЗрж╢ржирзЗ рж╕ржорж╕рзНржпрж╛ рж╣рзЯрзЗржЫрзЗ: {e}")
    model = None

GRAPH_API_URL = 'https://graph.facebook.com/v19.0/me/messages'

def get_full_knowledge_base():
    if not client: return "ржХрзЛржирзЛ рждржерзНржп ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯржирж┐ред"
    try:
        all_docs = knowledge_collection.find({})
        knowledge_text = "\n".join([doc.get("information", "") for doc in all_docs])
        return knowledge_text if knowledge_text else "ржХрзЛржирзЛ рждржерзНржп ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯржирж┐ред"
    except Exception as e:
        print(f"рж╕ржорзНржкрзВрж░рзНржг ржЬрзНржЮрж╛ржиржнрж╛ржирзНржбрж╛рж░ ржЖржирждрзЗ рж╕ржорж╕рзНржпрж╛: {e}")
        return "ржХрзЛржирзЛ рждржерзНржп ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯржирж┐ред"

def find_faq_response(message):
    lower_message = message.lower()
    for keywords, response in FAQ_RESPONSES.items():
        for keyword in keywords:
            # ржХрзАржУрзЯрж╛рж░рзНржбржЯрж┐ ржПржХржЯрж┐ рж╕ржорзНржкрзВрж░рзНржг рж╢ржмрзНржж рж╣рж┐рж╕рзЗржмрзЗ ржмрж╛ржХрзНржпрзЗрж░ ржоржзрзНржпрзЗ ржЖржЫрзЗ ржХрж┐ржирж╛ рждрж╛ ржкрж░рзАржХрзНрж╖рж╛ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ
            if re.search(r'\b' + re.escape(keyword) + r'\b', lower_message):
                return response
    return None

@app.route('/')
def home():
    return 'рж╕рж╛рж░рзНржнрж╛рж░ржЯрж┐ рж╕ржлрж▓ржнрж╛ржмрзЗ ржЪрж▓ржЫрзЗ!', 200

@app.route('/webhook', methods=['GET', 'POST'])
def webhook():
    if request.method == 'GET':
        if request.args.get('hub.verify_token') == VERIFY_TOKEN:
            return request.args.get('hub.challenge'), 200
        else:
            return 'ржнрзЗрж░рж┐ржлрж┐ржХрзЗрж╢ржи ржЯрзЛржХрзЗржи ржнрзБрж▓', 403
    
    if request.method == 'POST':
        data = request.get_json()
        if data and data.get('object') == 'page':
            for entry in data.get('entry', []):
                for messaging_event in entry.get('messaging', []):
                    sender_id = messaging_event['sender']['id']
                    
                    if messaging_event.get('optin'):
                        # ... (OTN ржХрзЛржб)
                        continue

                    if messaging_event.get('message'):
                        message_text = messaging_event['message'].get('text')
                        if message_text:
                            # --- ржирждрзБржи ржХрж╛рж░рзНржпржкрзНрж░ржгрж╛рж▓рзА ---
                            user_state, _ = get_or_create_user_state(sender_id)
                            lower_message = message_text.lower()
                            
                            # ржзрж╛ржк рзз: рж╕рж╛ржзрж╛рж░ржг FAQ ржкрж░рзАржХрзНрж╖рж╛
                            faq_answer = find_faq_response(message_text)
                            if faq_answer:
                                send_facebook_message(sender_id, faq_answer)
                                continue

                            # ржзрж╛ржк рзи: ржпржжрж┐ ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзА ржХржиржлрж╛рж░рзНржорзЗрж╢ржирзЗрж░ ржЕржкрзЗржХрзНрж╖рж╛рзЯ ржерж╛ржХрзЗ
                            if user_state == "awaiting_confirmation" and any(word in lower_message for word in POSITIVE_CONFIRMATIONS):
                                save_message_to_db(sender_id, 'user', message_text)
                                call_ai_for_final_order(sender_id, message_text)
                                continue

                            # ржзрж╛ржк рзй: ржкрзНрж░ржержо ржорзЗрж╕рзЗржЬ ржмрж╛ ржУрзЯрзЗрж▓ржХрж╛ржо ржХрзАржУрзЯрж╛рж░рзНржб
                            history_count = get_chat_history_count(sender_id)
                            contains_welcome_keyword = any(keyword in lower_message for keyword in WELCOME_KEYWORDS)
                            if history_count <= 1 or (contains_welcome_keyword and len(message_text.split()) < 4):
                                save_message_to_db(sender_id, 'user', message_text)
                                send_facebook_message(sender_id, WELCOME_MESSAGE_1)
                                time.sleep(1)
                                send_facebook_message(sender_id, WELCOME_MESSAGE_2)
                                save_message_to_db(sender_id, 'model', "Sent welcome messages.")
                                set_user_state(sender_id, "ordering")
                                continue
                            
                            # ржзрж╛ржк рзк: рж╕рж╛ржзрж╛рж░ржг AI ржХрж▓
                            call_ai_for_general_chat(sender_id, message_text)
        return 'Event received', 200

def call_ai_for_general_chat(sender_id, message_text):
    """рж╕рж╛ржзрж╛рж░ржг ржХржерзЛржкржХржержи ржПржмржВ ржЖржЗржЯрзЗржо рж╢ржирж╛ржХрзНржд ржХрж░рж╛рж░ ржЬржирзНржп AI-ржХрзЗ ржХрж▓ ржХрж░рзЗ"""
    save_message_to_db(sender_id, 'user', message_text)
    if model:
        try:
            bot_response = get_gemini_response(sender_id, message_text, "general_chat")
            save_message_to_db(sender_id, 'model', bot_response)
            
            if "ржЖржкржирж┐ ржХрж┐ ржЕрж░рзНржбрж╛рж░ ржХрж░рждрзЗ ржЪрж╛ржи" in bot_response or "ржХржиржлрж╛рж░рзНржо ржХрж░рждрзЗ ржЪрж╛ржи" in bot_response:
                set_user_state(sender_id, "awaiting_confirmation")
            else:
                set_user_state(sender_id, "ordering")
            
            send_facebook_message(sender_id, bot_response)
        except Exception as e:
            print(f"Gemini ржерзЗржХрзЗ рж╕рж╛ржзрж╛рж░ржг ржЙрждрзНрждрж░ ржЖржирждрзЗ рж╕ржорж╕рзНржпрж╛: {e}")
            send_facebook_message(sender_id, "ржжрзБржГржЦрж┐ржд, ржЖржорж┐ ржмрзБржЭрждрзЗ ржкрж╛рж░рж┐ржирж┐ред")

def call_ai_for_final_order(sender_id, message_text):
    """ ржЪрзВрзЬрж╛nt ржЕрж░рзНржбрж╛рж░ ржПржмржВ ржмрж┐рж▓ рж╣рж┐рж╕рж╛ржмрзЗрж░ ржЬржирзНржп AI-ржХрзЗ ржХрж▓ ржХрж░рзЗ"""
    if model:
        try:
            bot_response = get_gemini_response(sender_id, message_text, "confirm_order")
            save_message_to_db(sender_id, 'model', bot_response)
            
            if "[ORDER_CONFIRMATION]" in bot_response:
                bill_match = re.search(r'\[BILL:(\d+\.?\d*)\]', bot_response)
                total_bill = bill_match.group(1) if bill_match else "ржорзЛржЯ ржмрж┐рж▓"
                
                confirmation_message = ORDER_CONFIRMATION_TEMPLATE.format(total_bill)
                send_facebook_message(sender_id, confirmation_message)
                
                details_match = re.search(r'\[DETAILS:(.*?)\]', bot_response)
                if details_match:
                    details_str = details_match.group(1)
                    save_customer_details(sender_id, details_str, "completed")
                
                send_otn_request(sender_id)
            else:
                set_user_state(sender_id, "awaiting_address")
                send_facebook_message(sender_id, bot_response)
        except Exception as e:
            print(f"Gemini ржерзЗржХрзЗ ржЪрзВрзЬрж╛ржирзНржд ржЕрж░рзНржбрж╛рж░ ржЖржирждрзЗ рж╕ржорж╕рзНржпрж╛: {e}")
            send_facebook_message(sender_id, "ржжрзБржГржЦрж┐ржд, ржПржХржЯрж┐ рж╕ржорж╕рзНржпрж╛ рж╣рзЯрзЗржЫрзЗред")


def get_gemini_response(sender_id, message, task):
    history = get_chat_history(sender_id, limit=6)
    formatted_history = "\n".join([f"{msg['role']}: {msg['content']}" for msg in history])

    customer_details = get_saved_customer_details(sender_id)
    details_context = "ржПржЗ ржЧрзНрж░рж╛рж╣ржХрзЗрж░ ржХрзЛржирзЛ рждржерзНржп ржЖржорж╛ржжрзЗрж░ ржХрж╛ржЫрзЗ рж╕рзЗржн ржХрж░рж╛ ржирзЗржЗред"
    saved_address = ""
    if customer_details and customer_details.get('address'):
        saved_address = customer_details.get('address')
        details_context = f"ржПржЗ ржЧрзНрж░рж╛рж╣ржХрзЗрж░ ржПржХржЯрж┐ ржарж┐ржХрж╛ржирж╛ ржЖржорж╛ржжрзЗрж░ ржХрж╛ржЫрзЗ рж╕рзЗржн ржХрж░рж╛ ржЖржЫрзЗ: {saved_address}"
    
    knowledge_base_for_prompt = get_full_knowledge_base()

    if task == "confirm_order":
        task_prompt = "ржЧрзНрж░рж╛рж╣ржХ рждрж╛рж░ ржЕрж░рзНржбрж╛рж░ржЯрж┐ ржХржиржлрж╛рж░рзНржо ржХрж░рзЗржЫрзЗред ржкрзВрж░рзНржмрзЗрж░ ржХржерзЛржкржХржержи ржПржмржВ ржЖржкржирж╛рж░ ржЬрзНржЮрж╛ржи ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ ржорзЛржЯ ржмрж┐рж▓ рж╣рж┐рж╕рж╛ржм ржХрж░рзБржи ржПржмржВ ржПржХржЯрж┐ ржЪрзВрзЬрж╛ржирзНржд ржХржиржлрж╛рж░рзНржорзЗрж╢ржи рждрзИрж░рж┐ ржХрж░рзБржиред"
    else: # general_chat
        task_prompt = "ржкрзВрж░рзНржмрзЗрж░ ржХржерзЛржкржХржержи ржПржмржВ ржЖржкржирж╛рж░ ржЬрзНржЮрж╛ржи ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ ржЧрзНрж░рж╛рж╣ржХрзЗрж░ ржирждрзБржи ржорзЗрж╕рзЗржЬрзЗрж░ ржПржХржЯрж┐ рж╕рж╛рж╣рж╛ржпрзНржпржХрж╛рж░рзА ржЙрждрзНрждрж░ ржжрж┐ржиред"

    prompt = f"""
    ### ржЖржкржирж╛рж░ ржЬрзНржЮрж╛ржи (Knowledge Base) ###
    {knowledge_base_for_prompt}
    
    ### ржЧрзНрж░рж╛рж╣ржХрзЗрж░ рж╕рзЗржн ржХрж░рж╛ рждржерзНржп ###
    {details_context}

    ### ржХржарзЛрж░ ржирж┐рж░рзНржжрзЗрж╢ржирж╛ (Strict Instructions) ###
    1.  рж╕рж░рзНржмржжрж╛ ржПржмржВ рж╢рзБржзрзБржорж╛рждрзНрж░ "ржЖржкржирж╛рж░ ржЬрзНржЮрж╛ржи" ржПржмржВ "ржкрзВрж░рзНржмрзЗрж░ ржХржерзЛржкржХржержи" ржПрж░ ржЙржкрж░ ржнрж┐рждрзНрждрж┐ ржХрж░рзЗ ржЙрждрзНрждрж░ ржжрж┐ржиред
    2.  **ржкрзНрж░рж╕ржЩрзНржЧ ржмрзЛржЭрж╛рж░ ржирж┐рзЯржо:** ржпржжрж┐ ржЖржкржирж╛рж░ ржЖржЧрзЗрж░ ржкрзНрж░рж╢рзНржирзЗ ржЖржкржирж┐ ржХрзЛржирзЛ ржХржиржлрж╛рж░рзНржорзЗрж╢ржи ржЪрзЗрзЯрзЗ ржерж╛ржХрзЗржи (ржпрзЗржоржи: "ржЖржкржирж┐ ржХрж┐ ржЕрж░рзНржбрж╛рж░ ржХрж░рждрзЗ ржЪрж╛ржи?") ржПржмржВ ржЧрзНрж░рж╛рж╣ржХ "ржЬрзНржмрж┐", "рж╣рзНржпрж╛ржБ", "hmm", "ok", "ржХржиржлрж╛рж░рзНржо" ржПржЗ ржзрж░ржирзЗрж░ ржХрзЛржирзЛ ржЗрждрж┐ржмрж╛ржЪржХ ржЙрждрзНрждрж░ ржжрзЗрзЯ, рждрж╛рж╣рж▓рзЗ ржкрзНрж░рж╢рзНржиржЯрж┐ ржкрзБржирж░рж╛ржмрзГрждрзНрждрж┐ ржирж╛ ржХрж░рзЗ ржЕрж░рзНржбрж╛рж░рзЗрж░ ржкрж░ржмрж░рзНрждрзА ржзрж╛ржкрзЗ ржЪрж▓рзЗ ржпрж╛ржмрзЗржиред
    3.  **рж╣рж┐рж╕рж╛ржм ржХрж░рж╛рж░ ржирж┐рзЯржо:** ржпржжрж┐ ржЧрзНрж░рж╛рж╣ржХ ржПржХрж╛ржзрж┐ржХ ржЖржЗржЯрзЗржорзЗрж░ ржорзЛржЯ ржжрж╛ржо ржЬрж╛ржирждрзЗ ржЪрж╛рзЯ, рждрж╛рж╣рж▓рзЗ "ржкрзВрж░рзНржмрзЗрж░ ржХржерзЛржкржХржержи" ржПржмржВ "ржЖржкржирж╛рж░ ржЬрзНржЮрж╛ржи" ржерзЗржХрзЗ ржЖржЗржЯрзЗржо ржУ ржжрж╛ржо ржирж┐рзЯрзЗ рж╕ржарж┐ржХржнрж╛ржмрзЗ рж╣рж┐рж╕рж╛ржм ржХрж░рзЗ ржПржХржЯрж┐ ржмрзНрж░рзЗржХржбрж╛ржЙржи рж╕рж╣ ржорзЛржЯ ржмрж┐рж▓ ржжрзЗржЦрж╛ржмрзЗржиред
    4.  **ржЕрж░рзНржбрж╛рж░ ржХржиржлрж╛рж░рзНржо ржХрж░рж╛рж░ ржирж┐рзЯржо:** ржЧрзНрж░рж╛рж╣ржХ ржпржЦржи рж╕рзНржкрж╖рзНржЯржнрж╛ржмрзЗ ржЕрж░рзНржбрж╛рж░ ржирж┐рж╢рзНржЪрж┐ржд ржХрж░ржмрзЗ, рждржЦржи ржЖржкржирж╛рж░ ржЙрждрзНрждрж░рзЗрж░ рж╢рзБрж░рзБрждрзЗ ржЕржмрж╢рзНржпржЗ "[ORDER_CONFIRMATION]" ржЯрзНржпрж╛ржЧржЯрж┐ ржпрзЛржЧ ржХрж░ржмрзЗржиред ржПрж░ржкрж░ "[BILL:ржорзЛржЯ_ржЯрж╛ржХрж╛]" ржПржмржВ "[DETAILS:ржирж╛ржо=..., ржарж┐ржХрж╛ржирж╛=..., ржлрзЛржи=...]" ржЯрзНржпрж╛ржЧржЧрзБрж▓рзЛ ржпрзЛржЧ ржХрж░ржмрзЗржиред ржпржжрж┐ ржХрзЛржирзЛ рждржерзНржп ржирж╛ ржЬрж╛ржирзЗржи, рждрж╛рж╣рж▓рзЗ 'N/A' рж▓рж┐ржЦржмрзЗржиред
    
    ### ржХржерзЛржкржХржержирзЗрж░ ржЙржжрж╛рж╣рж░ржг ###
    user: ржЖржорж╛рж░ ржПржХ ржкрзНржпрж╛ржХрзЗржЯ ржЪрж┐ржХрзЗржи рж░рзЛрж▓ ржЖрж░ ржПржХ ржкрзНржпрж╛ржХрзЗржЯ ржкрж░рзЛржЯрж╛ рж▓рж╛ржЧржмрзЗред
    model: ржЖржкржирж┐ ржХрзЛржи ржкрж░рзЛржЯрж╛ ржирж┐рждрзЗ ржЖржЧрзНрж░рж╣рзА? ржЖржорж╛ржжрзЗрж░ ржХрж╛ржЫрзЗ ржЖрж▓рзБ ржкрж░рзЛржЯрж╛ ржПржмржВ ржмрж┐ржнрж┐ржирзНржи рж╕рж╛ржЗржЬрзЗрж░ ржЪрж╛рж░ржХрзЛржирж╛ ржкрж░рзЛржЯрж╛ ржЖржЫрзЗред
    user: ржЪрж╛рж░ржХрзЛржирж╛ ржкрж░рзЛржЯрж╛ рззрзирзжрзж ржЧрзНрж░рж╛ржоред
    model: ржарж┐ржХ ржЖржЫрзЗ, рж╕рзНржпрж╛рж░/ржорзНржпрж╛ржоред ржЖржкржирж╛рж░ ржжрзБржЯрж┐ ржЖржЗржЯрзЗржо рж╣рж▓рзЛ: рзз ржкрзНржпрж╛ржХрзЗржЯ ржЪрж┐ржХрзЗржи рж░рзЛрж▓ ржПржмржВ рзз ржкрзНржпрж╛ржХрзЗржЯ ржЪрж╛рж░ржХрзЛржирж╛ ржкрж░рзЛржЯрж╛ (рззрзирзжрзжgm)ред ржЖржкржирж┐ ржХрж┐ ржЕрж░рзНржбрж╛рж░ржЯрж┐ ржХржиржлрж╛рж░рзНржо ржХрж░рждрзЗ ржЪрж╛ржи?
    user: ржЬрзНржмрж┐
    model: ржЕржмрж╢рзНржпржЗ! ржЖржкржирж╛рж░ ржжрзБржЯрж┐ ржЖржЗржЯрзЗржорзЗрж░ ржорзЛржЯ ржжрж╛ржо ржЖрж╕ржЫрзЗ:\n- ржЪрж┐ржХрзЗржи рж░рзЛрж▓ (рзз ржкрзНржпрж╛ржХрзЗржЯ): рзирзирзл ржЯрж╛ржХрж╛\n- ржЪрж╛рж░ржХрзЛржирж╛ ржкрж░рзЛржЯрж╛ (рззрзирзжрзжgm): рзирзирзж ржЯрж╛ржХрж╛\n- ржбрзЗрж▓рж┐ржнрж╛рж░рж┐ ржЪрж╛рж░рзНржЬ: рзмрзж ржЯрж╛ржХрж╛\n\nрж╕рж░рзНржмржорзЛржЯ: рзирзирзл + рзирзирзж + рзмрзж = рзлрзжрзл ржЯрж╛ржХрж╛ред ржЖржкржирж╛рж░ ржбрзЗрж▓рж┐ржнрж╛рж░рж┐ ржарж┐ржХрж╛ржирж╛ ржХрж┐ ржкрзНрж░ржпрж╝рзЛржЬржи?
    user: рж╣рзНржпрж╛ржБ, ржХржиржлрж╛рж░рзНржоред
    model: [ORDER_CONFIRMATION]\n[BILL:505]\n[DETAILS:ржирж╛ржо=N/A, ржарж┐ржХрж╛ржирж╛={saved_address}, ржлрзЛржи=N/A]

    ### ржЖржкржирж╛рж░ ржмрж░рзНрждржорж╛ржи ржХрж╛ржЬ ###
    {task_prompt}

    ### ржкрзВрж░рзНржмрзЗрж░ ржХржерзЛржкржХржержи ###
    {formatted_history}

    ### ржирждрзБржи ржорзЗрж╕рзЗржЬ ###
    user: "{message}"
    model: 
    """
    
    try:
        response = model.generate_content(prompt)
        return response.text
    except Exception as e:
        print(f"Gemini API Error: {e}")
        return "ржжрзБржГржЦрж┐ржд, ржПржХржЯрж┐ ржкрзНрж░ржпрзБржХрзНрждрж┐ржЧржд рж╕ржорж╕рзНржпрж╛ рж╣рзЯрзЗржЫрзЗред"

# --- ржирждрзБржи State Management ржлрж╛ржВрж╢ржи ---
def get_or_create_user_state(sender_id):
    user_data = customer_details_collection.find_one({'sender_id': sender_id})
    if user_data:
        return user_data.get("state", "greeting"), user_data
    else:
        # ржирждрзБржи ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзАрж░ ржЬржирзНржп state 'greeting' рж╣рж┐рж╕рзЗржмрзЗ рж╢рзБрж░рзБ рж╣ржмрзЗ
        customer_details_collection.insert_one({'sender_id': sender_id, 'state': 'greeting'})
        return 'greeting', None

def set_user_state(sender_id, state):
    customer_details_collection.update_one(
        {'sender_id': sender_id},
        {'$set': {'state': state}},
        upsert=True
    )
# ------------------------------------

# (ржмрж╛ржХрж┐ рж╕ржм ржлрж╛ржВрж╢ржи ржЖржЧрзЗрж░ ржорждрзЛржЗ ржерж╛ржХржмрзЗ)
def get_chat_history_count(sender_id):
    if client:
        return chat_history_collection.count_documents({'sender_id': sender_id})
    return 0

def save_message_to_db(sender_id, role, content):
    if client:
        chat_history_collection.insert_one({'sender_id': sender_id,'role': role,'content': content,'timestamp': datetime.utcnow()})

def get_chat_history(sender_id, limit=6):
    if client:
        history_cursor = chat_history_collection.find({'sender_id': sender_id}).sort('timestamp', -1).limit(limit)
        history = []
        for doc in history_cursor:
            role = doc.get('role')
            if role == 'assistant':
                role = 'model'
            history.append({'role': role, 'content': doc.get('content')})
        return history
    return []
    
def save_customer_details(sender_id, details_str, state="completed"):
    try:
        details = dict(item.split("=") for item in details_str.strip().split(", "))
        if client:
            customer_details_collection.update_one(
                {'sender_id': sender_id},
                {'$set': {
                    'name': details.get('ржирж╛ржо'),
                    'address': details.get('ржарж┐ржХрж╛ржирж╛'),
                    'phone': details.get('ржлрзЛржи'),
                    'last_updated': datetime.utcnow(),
                    'state': state
                }},
                upsert=True)
    except Exception as e:
        print(f"ржЧрзНрж░рж╛рж╣ржХрзЗрж░ рждржерзНржп ржкрж╛рж░рзНрж╕ ржХрж░рждрзЗ рж╕ржорж╕рзНржпрж╛: {e}")

def get_saved_customer_details(sender_id):
    if client:
        return customer_details_collection.find_one({'sender_id': sender_id})
    return None

def send_otn_request(recipient_id):
    params = {'access_token': FACEBOOK_PAGE_ACCESS_TOKEN}
    headers = {'Content-Type': 'application/json'}
    data = {'recipient': {'id': recipient_id},'message': {"attachment": {"type": "template","payload": {"template_type": "one_time_notif_req","title": "ржЖржорж╛ржжрзЗрж░ ржкрж░ржмрж░рзНрждрзА ржЕржлрж╛рж░ рж╕ржорзНржкрж░рзНржХрзЗ ржЬрж╛ржирждрзЗ ржЪрж╛ржи?","payload": "notify_me_payload" }}}}
    try:
        requests.post(GRAPH_API_URL, params=params, headers=headers, json=data)
    except Exception:
        pass

def send_telegram_notification(order_details):
    if not TELEGRAM_USERNAME or not CALLMEBOT_API_KEY:
        return
    message_body = f"*ржирждрзБржи ржЕрж░рзНржбрж╛рж░ ржПрж╕рзЗржЫрзЗ!*\n\n{order_details.replace('[ORDER_CONFIRMATION]', '').strip()}"
    encoded_message = urllib.parse.quote_plus(message_body)
    api_url = f"https://api.callmebot.com/text.php?user={TELEGRAM_USERNAME}&text={encoded_message}&apikey={CALLMEBOT_API_KEY}"
    try:
        requests.get(api_url, timeout=10)
    except Exception:
        pass

def get_or_create_label_id(label_name):
    get_labels_url = f"https://graph.facebook.com/v19.0/me/custom_labels"
    params = {'fields': 'name', 'access_token': FACEBOOK_PAGE_ACCESS_TOKEN}
    try:
        response = requests.get(get_labels_url, params=params, timeout=10)
        response.raise_for_status()
        existing_labels = response.json().get('data', [])
        for label in existing_labels:
            if label.get('name') == label_name:
                return label.get('id')
        create_label_url = f"https://graph.facebook.com/v19.0/me/custom_labels"
        data = {'name': label_name}
        response = requests.post(create_label_url, params={'access_token': FACEBOOK_PAGE_ACCESS_TOKEN}, json=data, timeout=10)
        response.raise_for_status()
        new_label = response.json()
        return new_label.get('id')
    except requests.exceptions.RequestException:
        return None

def apply_date_label(user_psid):
    today_label_name = datetime.now().strftime("%d-%m-%Y")
    label_id = get_or_create_label_id(today_label_name)
    if not label_id:
        return
    apply_label_url = f"https://graph.facebook.com/v19.0/{label_id}/label"
    params = {'user': user_psid, 'access_token': FACEBOOK_PAGE_ACCESS_TOKEN}
    try:
        response = requests.post(apply_label_url, params=params, timeout=10)
        response.raise_for_status()
    except Exception:
        pass

def send_facebook_message(recipient_id, message_text):
    params = {'access_token': FACEBOOK_PAGE_ACCESS_TOKEN}
    headers = {'Content-Type': 'application/json'}
    data = {'recipient': {'id': recipient_id},'message': {'text': message_text},'messaging_type': 'RESPONSE'}
    try:
        requests.post(GRAPH_API_URL, params=params, headers=headers, json=data, timeout=10)
    except Exception:
        pass

